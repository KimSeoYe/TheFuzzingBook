        -:    0:Source:scan.c
        -:    0:Graph:/Users/kimseoye/Developer/git/TheFuzzingBook/2_lexical_fuzzing/4_greybox_fuzzing/fuzzing_architecture/lib/bc-1.07.1/bc/scan.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:
        -:    2:#line 3 "scan.c"
        -:    3:
        -:    4:#define  YY_INT_ALIGNED short int
        -:    5:
        -:    6:/* A lexical scanner generated by flex */
        -:    7:
        -:    8:#define FLEX_SCANNER
        -:    9:#define YY_FLEX_MAJOR_VERSION 2
        -:   10:#define YY_FLEX_MINOR_VERSION 5
        -:   11:#define YY_FLEX_SUBMINOR_VERSION 35
        -:   12:#if YY_FLEX_SUBMINOR_VERSION > 0
        -:   13:#define FLEX_BETA
        -:   14:#endif
        -:   15:
        -:   16:/* First, we deal with  platform-specific or compiler-specific issues. */
        -:   17:
        -:   18:/* begin standard C headers. */
        -:   19:#ifdef _LIBC
        -:   20:#include "namespace.h"
        -:   21:#endif
        -:   22:#include <stdio.h>
        -:   23:#include <string.h>
        -:   24:#include <errno.h>
        -:   25:#include <stdlib.h>
        -:   26:
        -:   27:/* end standard C headers. */
        -:   28:
        -:   29:/*	$NetBSD: flexint.h,v 1.1.1.1 2009/10/26 00:26:19 christos Exp $	*/
        -:   30:
        -:   31:/* flex integer type definitions */
        -:   32:
        -:   33:#ifndef FLEXINT_H
        -:   34:#define FLEXINT_H
        -:   35:
        -:   36:/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
        -:   37:
        -:   38:#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
        -:   39:
        -:   40:/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
        -:   41: * if you want the limit (max/min) macros for int types. 
        -:   42: */
        -:   43:#ifndef __STDC_LIMIT_MACROS
        -:   44:#define __STDC_LIMIT_MACROS 1
        -:   45:#endif
        -:   46:
        -:   47:#include <inttypes.h>
        -:   48:typedef int8_t flex_int8_t;
        -:   49:typedef uint8_t flex_uint8_t;
        -:   50:typedef int16_t flex_int16_t;
        -:   51:typedef uint16_t flex_uint16_t;
        -:   52:typedef int32_t flex_int32_t;
        -:   53:typedef uint32_t flex_uint32_t;
        -:   54:#else
        -:   55:typedef signed char flex_int8_t;
        -:   56:typedef short int flex_int16_t;
        -:   57:typedef int flex_int32_t;
        -:   58:typedef unsigned char flex_uint8_t; 
        -:   59:typedef unsigned short int flex_uint16_t;
        -:   60:typedef unsigned int flex_uint32_t;
        -:   61:#endif /* ! C99 */
        -:   62:
        -:   63:/* Limits of integral types. */
        -:   64:#ifndef INT8_MIN
        -:   65:#define INT8_MIN               (-128)
        -:   66:#endif
        -:   67:#ifndef INT16_MIN
        -:   68:#define INT16_MIN              (-32767-1)
        -:   69:#endif
        -:   70:#ifndef INT32_MIN
        -:   71:#define INT32_MIN              (-2147483647-1)
        -:   72:#endif
        -:   73:#ifndef INT8_MAX
        -:   74:#define INT8_MAX               (127)
        -:   75:#endif
        -:   76:#ifndef INT16_MAX
        -:   77:#define INT16_MAX              (32767)
        -:   78:#endif
        -:   79:#ifndef INT32_MAX
        -:   80:#define INT32_MAX              (2147483647)
        -:   81:#endif
        -:   82:#ifndef UINT8_MAX
        -:   83:#define UINT8_MAX              (255U)
        -:   84:#endif
        -:   85:#ifndef UINT16_MAX
        -:   86:#define UINT16_MAX             (65535U)
        -:   87:#endif
        -:   88:#ifndef UINT32_MAX
        -:   89:#define UINT32_MAX             (4294967295U)
        -:   90:#endif
        -:   91:
        -:   92:#endif /* ! FLEXINT_H */
        -:   93:
        -:   94:#ifdef __cplusplus
        -:   95:
        -:   96:/* The "const" storage-class-modifier is valid. */
        -:   97:#define YY_USE_CONST
        -:   98:
        -:   99:#else	/* ! __cplusplus */
        -:  100:
        -:  101:/* C99 requires __STDC__ to be defined as 1. */
        -:  102:#if defined (__STDC__)
        -:  103:
        -:  104:#define YY_USE_CONST
        -:  105:
        -:  106:#endif	/* defined (__STDC__) */
        -:  107:#endif	/* ! __cplusplus */
        -:  108:
        -:  109:#ifdef YY_USE_CONST
        -:  110:#define yyconst const
        -:  111:#else
        -:  112:#define yyconst
        -:  113:#endif
        -:  114:
        -:  115:/* Returned upon end-of-file. */
        -:  116:#define YY_NULL 0
        -:  117:
        -:  118:/* Promotes a possibly negative, possibly signed char to an unsigned
        -:  119: * integer for use as an array index.  If the signed char is negative,
        -:  120: * we want to instead treat it as an 8-bit unsigned char, hence the
        -:  121: * double cast.
        -:  122: */
        -:  123:#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
        -:  124:
        -:  125:/* Enter a start condition.  This macro really ought to take a parameter,
        -:  126: * but we do it the disgusting crufty way forced on us by the ()-less
        -:  127: * definition of BEGIN.
        -:  128: */
        -:  129:#define BEGIN (yy_start) = 1 + 2 *
        -:  130:
        -:  131:/* Translate the current start state into a value that can be later handed
        -:  132: * to BEGIN to return to the state.  The YYSTATE alias is for lex
        -:  133: * compatibility.
        -:  134: */
        -:  135:#define YY_START (((yy_start) - 1) / 2)
        -:  136:#define YYSTATE YY_START
        -:  137:
        -:  138:/* Action number for EOF rule of a given start state. */
        -:  139:#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
        -:  140:
        -:  141:/* Special action meaning "start processing a new file". */
        -:  142:#define YY_NEW_FILE yyrestart(yyin  )
        -:  143:
        -:  144:#define YY_END_OF_BUFFER_CHAR 0
        -:  145:
        -:  146:/* Size of default input buffer. */
        -:  147:#ifndef YY_BUF_SIZE
        -:  148:#define YY_BUF_SIZE 16384
        -:  149:#endif
        -:  150:
        -:  151:/* The state buf must be large enough to hold one state per character in the main buffer.
        -:  152: */
        -:  153:#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
        -:  154:
        -:  155:#ifndef YY_TYPEDEF_YY_BUFFER_STATE
        -:  156:#define YY_TYPEDEF_YY_BUFFER_STATE
        -:  157:typedef struct yy_buffer_state *YY_BUFFER_STATE;
        -:  158:#endif
        -:  159:
        -:  160:extern int yyleng;
        -:  161:
        -:  162:extern FILE *yyin, *yyout;
        -:  163:
        -:  164:#define EOB_ACT_CONTINUE_SCAN 0
        -:  165:#define EOB_ACT_END_OF_FILE 1
        -:  166:#define EOB_ACT_LAST_MATCH 2
        -:  167:
        -:  168:    #define YY_LESS_LINENO(n)
        -:  169:    
        -:  170:/* Return all but the first "n" matched characters back to the input stream. */
        -:  171:#define yyless(n) \
        -:  172:	do \
        -:  173:		{ \
        -:  174:		/* Undo effects of setting up yytext. */ \
        -:  175:        int yyless_macro_arg = (n); \
        -:  176:        YY_LESS_LINENO(yyless_macro_arg);\
        -:  177:		*yy_cp = (yy_hold_char); \
        -:  178:		YY_RESTORE_YY_MORE_OFFSET \
        -:  179:		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        -:  180:		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        -:  181:		} \
        -:  182:	while ( 0 )
        -:  183:
        -:  184:#define unput(c) yyunput( c, (yytext_ptr)  )
        -:  185:
        -:  186:#ifndef YY_TYPEDEF_YY_SIZE_T
        -:  187:#define YY_TYPEDEF_YY_SIZE_T
        -:  188:typedef size_t yy_size_t;
        -:  189:#endif
        -:  190:
        -:  191:#ifndef YY_STRUCT_YY_BUFFER_STATE
        -:  192:#define YY_STRUCT_YY_BUFFER_STATE
        -:  193:struct yy_buffer_state
        -:  194:	{
        -:  195:	FILE *yy_input_file;
        -:  196:
        -:  197:	char *yy_ch_buf;		/* input buffer */
        -:  198:	char *yy_buf_pos;		/* current position in input buffer */
        -:  199:
        -:  200:	/* Size of input buffer in bytes, not including room for EOB
        -:  201:	 * characters.
        -:  202:	 */
        -:  203:	yy_size_t yy_buf_size;
        -:  204:
        -:  205:	/* Number of characters read into yy_ch_buf, not including EOB
        -:  206:	 * characters.
        -:  207:	 */
        -:  208:	int yy_n_chars;
        -:  209:
    #####:  210:	/* Whether we "own" the buffer - i.e., we know we created it,
branch  0 never executed
branch  1 never executed
    #####:  211:	 * and can realloc() it to grow it, and should free() it to
        -:  212:	 * delete it.
    #####:  213:	 */
        -:  214:	int yy_is_our_buffer;
    #####:  215:
    #####:  216:	/* Whether this is an "interactive" input source; if so, and
    #####:  217:	 * if we're using stdio for input, then we want to use getc()
    #####:  218:	 * instead of fread(), to make sure we stop fetching input after
    #####:  219:	 * each newline.
    #####:  220:	 */
    #####:  221:	int yy_is_interactive;
    #####:  222:
    #####:  223:	/* Whether we're considered to be at the beginning of a line.
    #####:  224:	 * If so, '^' rules will be active on the next match, otherwise
    #####:  225:	 * not.
    #####:  226:	 */
    #####:  227:	int yy_at_bol;
    #####:  228:
    #####:  229:    int yy_bs_lineno; /**< The line count. */
    #####:  230:    int yy_bs_column; /**< The column count. */
    #####:  231:    
    #####:  232:	/* Whether to try to fill the input buffer when we reach the
    #####:  233:	 * end of it.
    #####:  234:	 */
    #####:  235:	int yy_fill_buffer;
        -:  236:
        -:  237:	int yy_buffer_status;
        -:  238:
        -:  239:#define YY_BUFFER_NEW 0
    #####:  240:#define YY_BUFFER_NORMAL 1
        -:  241:	/* When an EOF's been seen but there's still some text to process
        -:  242:	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
        -:  243:	 * shouldn't try reading from the input source any more.  We might
    #####:  244:	 * still have a bunch of tokens to match, though, because of
    #####:  245:	 * possible backing-up.
    #####:  246:	 *
    #####:  247:	 * When we actually see the EOF, we change the status to "new"
        -:  248:	 * (via yyrestart()), so that the user can continue scanning by
        -:  249:	 * just pointing yyin at a new input file.
    #####:  250:	 */
        -:  251:#define YY_BUFFER_EOF_PENDING 2
        -:  252:
        -:  253:	};
        -:  254:#endif /* !YY_STRUCT_YY_BUFFER_STATE */
    #####:  255:
    #####:  256:/* Stack of input buffers. */
    #####:  257:static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
    #####:  258:static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
    #####:  259:static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
    #####:  260:
    #####:  261:/* We provide macros for accessing buffer states in case in the
        -:  262: * future we want to put the buffer states in a more general
        -:  263: * "scanner state".
        -:  264: *
        -:  265: * Returns the top of the stack, or NULL.
        -:  266: */
        -:  267:#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
        -:  268:                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
        -:  269:                          : NULL)
        -:  270:
    #####:  271:/* Same as previous macro, but useful when we know that the buffer stack is not
    #####:  272: * NULL or when we need an lvalue. For internal use only.
        -:  273: */
    #####:  274:#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
        -:  275:
    #####:  276:/* yy_hold_char holds the character lost when yytext is formed. */
    #####:  277:static char yy_hold_char;
    #####:  278:static int yy_n_chars;		/* number of characters read into yy_ch_buf */
    #####:  279:int yyleng;
    #####:  280:
        -:  281:/* Points to current character in buffer. */
        -:  282:static char *yy_c_buf_p = (char *) 0;
        -:  283:static int yy_init = 0;		/* whether we need to initialize */
    #####:  284:static int yy_start = 0;	/* start state number */
        -:  285:
    #####:  286:/* Flag which is used to allow yywrap()'s to do buffer switches
branch  0 never executed
branch  1 never executed
        -:  287: * instead of setting up a fresh yyin.  A bit of a hack ...
    #####:  288: */
branch  0 never executed
branch  1 never executed
    #####:  289:static int yy_did_buffer_switch_on_eof;
branch  0 never executed
branch  1 never executed
        -:  290:
    #####:  291:void yyrestart (FILE *input_file  );
branch  0 never executed
branch  1 never executed
    #####:  292:void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
branch  0 never executed
branch  1 never executed
    #####:  293:YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
branch  0 never executed
branch  1 never executed
        -:  294:void yy_delete_buffer (YY_BUFFER_STATE b  );
    #####:  295:void yy_flush_buffer (YY_BUFFER_STATE b  );
branch  0 never executed
branch  1 never executed
        -:  296:void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
    #####:  297:void yypop_buffer_state (void );
    #####:  298:
        -:  299:static void yyensure_buffer_stack (void );
        -:  300:static void yy_load_buffer_state (void );
        -:  301:static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
    #####:  302:
        -:  303:#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )
        -:  304:
        -:  305:YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
    #####:  306:YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
    #####:  307:YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
branch  0 never executed
branch  1 never executed
        -:  308:
    #####:  309:void *yyalloc (yy_size_t  );
branch  0 never executed
branch  1 never executed
    #####:  310:void *yyrealloc (void *,yy_size_t  );
branch  0 never executed
branch  1 never executed
        -:  311:void yyfree (void *  );
    #####:  312:
branch  0 never executed
branch  1 never executed
        -:  313:#define yy_new_buffer yy_create_buffer
        -:  314:
        -:  315:#define yy_set_interactive(is_interactive) \
        -:  316:	{ \
        -:  317:	if ( ! YY_CURRENT_BUFFER ){ \
        -:  318:        yyensure_buffer_stack (); \
    #####:  319:		YY_CURRENT_BUFFER_LVALUE =    \
    #####:  320:            yy_create_buffer(yyin,YY_BUF_SIZE ); \
branch  0 never executed
branch  1 never executed
    #####:  321:	} \
        -:  322:	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
    #####:  323:	}
    #####:  324:
    #####:  325:#define yy_set_bol(at_bol) \
branch  0 never executed
branch  1 never executed
    #####:  326:	{ \
branch  0 never executed
branch  1 never executed
        -:  327:	if ( ! YY_CURRENT_BUFFER ){\
    #####:  328:        yyensure_buffer_stack (); \
branch  0 never executed
branch  1 never executed
        -:  329:		YY_CURRENT_BUFFER_LVALUE =    \
    #####:  330:            yy_create_buffer(yyin,YY_BUF_SIZE ); \
branch  0 never executed
branch  1 never executed
        -:  331:	} \
    #####:  332:	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
    #####:  333:	}
    #####:  334:
    #####:  335:#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
branch  0 never executed
branch  1 never executed
        -:  336:
        -:  337:/* Begin user sect3 */
    #####:  338:
    #####:  339:typedef unsigned char YY_CHAR;
        -:  340:
    #####:  341:FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
        -:  342:
    #####:  343:typedef int yy_state_type;
    #####:  344:
        -:  345:extern int yylineno;
        -:  346:
        -:  347:int yylineno = 1;
    #####:  348:
branch  0 never executed
branch  1 never executed
    #####:  349:extern char *yytext;
        -:  350:#define yytext_ptr yytext
    #####:  351:
branch  0 never executed
branch  1 never executed
    #####:  352:static yy_state_type yy_get_previous_state (void );
        -:  353:static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
    #####:  354:static int yy_get_next_buffer (void );
        -:  355:#if defined(__GNUC__) && __GNUC__ >= 3
    #####:  356:__attribute__((__noreturn__))
    #####:  357:#endif
        -:  358:static void yy_fatal_error (yyconst char msg[]  );
        -:  359:
        -:  360:/* Done after the current pattern has been matched and before the
        -:  361: * corresponding action - sets up yytext.
        -:  362: */
        -:  363:#define YY_DO_BEFORE_ACTION \
        -:  364:	(yytext_ptr) = yy_bp; \
        -:  365:	yyleng = (size_t) (yy_cp - yy_bp); \
        -:  366:	(yy_hold_char) = *yy_cp; \
        -:  367:	*yy_cp = '\0'; \
        -:  368:	(yy_c_buf_p) = yy_cp;
        -:  369:
        -:  370:#define YY_NUM_RULES 46
        -:  371:#define YY_END_OF_BUFFER 47
        -:  372:/* This struct is not used in this scanner,
        -:  373:   but its presence is necessary. */
        -:  374:struct yy_trans_info
        -:  375:	{
        -:  376:	flex_int32_t yy_verify;
        -:  377:	flex_int32_t yy_nxt;
        -:  378:	};
        -:  379:static yyconst flex_int16_t yy_accept[316] =
        -:  380:    {   0,
        -:  381:        0,    0,    2,    2,   47,   45,   40,   38,   32,   45,
        -:  382:        1,   33,   33,   29,   33,   29,   29,   28,   33,   44,
        -:  383:       36,   34,   36,   45,   29,   42,   42,   42,   42,   42,
        -:  384:       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
        -:  385:       42,   42,   45,    2,    2,    3,    2,    2,    1,    2,
        -:  386:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  387:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  388:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  389:        2,   40,   36,    0,   43,   34,   30,   37,   44,    0,
        -:  390:       41,   44,   44,    0,   35,   39,   42,   42,   42,   42,
        -:  391:
        -:  392:       42,   42,   42,   42,   42,   42,   10,   42,   42,   42,
        -:  393:       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
        -:  394:       31,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  395:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  396:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  397:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  398:        2,   44,    0,    0,   44,    0,   42,   42,   42,   42,
        -:  399:       42,    9,   42,   42,   42,   42,   42,   42,   42,   42,
        -:  400:       42,   42,   42,   42,   42,   42,   42,   42,   42,    2,
        -:  401:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  402:
        -:  403:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  404:        2,    2,    2,    2,    2,    2,   16,   42,   42,   42,
        -:  405:       17,   20,   42,   42,   21,   42,   42,   42,   42,    6,
        -:  406:       42,   18,   42,   42,   12,   22,   42,   42,    2,    2,
        -:  407:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  408:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:  409:        5,   42,   42,   42,   14,   42,   42,   15,   26,   42,
        -:  410:       42,   13,   42,   11,    2,    2,    2,    2,    2,    2,
        -:  411:        2,    2,    2,    2,    2,    2,    2,    2,   42,    4,
        -:  412:       42,    7,   27,   19,    8,   42,    2,    2,    2,    2,
        -:  413:
        -:  414:        2,    2,    2,    2,   42,   23,   42,    2,    2,    2,
        -:  415:       25,   24,    2,    2,    0
        -:  416:    } ;
        -:  417:
        -:  418:static yyconst flex_int32_t yy_ec[256] =
        -:  419:    {   0,
        -:  420:        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        -:  421:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  422:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  423:        1,    2,    4,    5,    6,    1,    7,    8,    1,    9,
        -:  424:       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
        -:  425:       17,   17,   17,   17,   17,   17,   17,    1,   18,   19,
        -:  426:       20,   21,    1,    1,   22,   22,   22,   22,   22,   22,
        -:  427:       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        -:  428:       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        -:  429:       23,   24,   25,   26,   27,    1,   28,   29,   30,   31,
        -:  430:
        -:  431:       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        -:  432:       42,   43,   44,   45,   46,   47,   48,   49,   50,   37,
        -:  433:       51,   37,   52,   53,   54,    1,    1,    1,    1,    1,
        -:  434:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  435:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  436:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  437:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  438:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  439:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  440:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  441:
        -:  442:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  443:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  444:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  445:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  446:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  447:        1,    1,    1,    1,    1
        -:  448:    } ;
        -:  449:
        -:  450:static yyconst flex_int32_t yy_meta[55] =
        -:  451:    {   0,
        -:  452:        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        -:  453:        1,    1,    1,    1,    1,    1,    3,    1,    1,    1,
        -:  454:        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        -:  455:        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        -:  456:        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        -:  457:        3,    1,    1,    1
        -:  458:    } ;
        -:  459:
        -:  460:static yyconst flex_int16_t yy_base[320] =
        -:  461:    {   0,
        -:  462:        0,    0,   54,    0,  553,  554,  550,  554,  531,  545,
        -:  463:      554,  529,  540,  554,  527,   97,   96,   96,  101,  107,
        -:  464:      526,  116,  525,  541,  523,  494,  496,  498,  507,  499,
        -:  465:      495,    0,   83,  104,  107,  507,  490,  486,  106,   96,
        -:  466:      491,  113,  479,    0,  529,  554,  510,  141,    0,  509,
        -:  467:      520,    0,  507,  133,  135,  130,  139,  141,  506,  150,
        -:  468:      505,  521,  503,  160,  123,  125,  137,  112,  130,  474,
        -:  469:      184,  185,  187,  188,  134,  473,  193,  183,  132,  194,
        -:  470:      467,  517,  554,  513,  554,  554,  554,  554,  221,  514,
        -:  471:      554,  222,  232,  513,  554,  554,    0,  468,  482,  472,
        -:  472:
        -:  473:      479,  465,  465,  470,  462,  479,    0,  460,  464,  464,
        -:  474:      475,  466,  465,  459,  206,  471,  453,  461,  451,  459,
        -:  475:      554,    0,  492,    0,  178,    0,    0,    0,    0,  233,
        -:  476:      490,    0,  241,  244,  489,    0,  443,   67,  192,  189,
        -:  477:      219,  138,  203,  221,  180,  234,  442,  224,  223,  233,
        -:  478:      246,  239,  240,  236,  250,  251,  235,  253,  245,  255,
        -:  479:        0,  278,  486,  287,  288,  485,  445,  458,  438,  448,
        -:  480:      451,    0,  435,  434,  434,  432,  444,  441,  430,  434,
        -:  481:      427,  442,  441,  423,  431,  422,  437,  422,  427,  291,
        -:  482:      462,  297,  461,  244,  268,  259,  281,  286,  415,  275,
        -:  483:
        -:  484:      277,  280,  283,  293,  284,  287,  295,  290,  308,  309,
        -:  485:      414,  303,  297,  315,  302,  310,    0,  423,  424,  418,
        -:  486:        0,    0,  416,  425,    0,  409,  408,  422,  406,    0,
        -:  487:      410,    0,  406,  418,    0,    0,  421,  416,  399,  314,
        -:  488:      312,  313,  398,  397,  311,  323,  396,  317,  319,  336,
        -:  489:      322,  395,  330,  394,  328,  342,  393,  392,  347,  345,
        -:  490:        0,  398,  406,  392,    0,  401,  389,    0,    0,  394,
        -:  491:      392,    0,  391,    0,  383,  338,  348,  337,  382,  346,
        -:  492:      341,  381,  380,  343,  351,  379,  356,  378,  373,    0,
        -:  493:      364,    0,    0,    0,    0,  367,  365,  364,  350,  363,
        -:  494:
        -:  495:      362,  361,  359,  355,  374,    0,  337,  368,  237,  357,
        -:  496:        0,    0,  168,  127,  554,  416,  122,  419,  422
        -:  497:    } ;
        -:  498:
        -:  499:static yyconst flex_int16_t yy_def[320] =
        -:  500:    {   0,
        -:  501:      315,    1,  315,    3,  315,  315,  315,  315,  315,  316,
        -:  502:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  503:      315,  315,  315,  315,  315,  317,  317,  317,  317,  317,
        -:  504:      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
        -:  505:      317,  317,  315,  318,  318,  315,  318,  319,  318,  318,
        -:  506:      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
        -:  507:      318,  318,  318,  318,   64,   64,   64,   64,   64,   64,
        -:  508:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  509:      318,  315,  315,  316,  315,  315,  315,  315,  315,  315,
        -:  510:      315,  315,  315,  315,  315,  315,  317,  317,  317,  317,
        -:  511:
        -:  512:      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
        -:  513:      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
        -:  514:      315,  318,  318,  318,  319,  318,  318,  318,  318,  318,
        -:  515:      318,  318,  318,  318,  318,  318,   64,   64,   64,   64,
        -:  516:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  517:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  518:      318,  315,  315,  315,  315,  315,  317,  317,  317,  317,
        -:  519:      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
        -:  520:      317,  317,  317,  317,  317,  317,  317,  317,  317,  318,
        -:  521:      318,  318,  318,   64,   64,   64,   64,   64,   64,   64,
        -:  522:
        -:  523:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  524:       64,   64,   64,   64,   64,   64,  317,  317,  317,  317,
        -:  525:      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
        -:  526:      317,  317,  317,  317,  317,  317,  317,  317,   64,   64,
        -:  527:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  528:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  529:      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
        -:  530:      317,  317,  317,  317,   64,   64,   64,   64,   64,   64,
        -:  531:       64,   64,   64,   64,   64,   64,   64,   64,  317,  317,
        -:  532:      317,  317,  317,  317,  317,  317,   64,   64,   64,   64,
        -:  533:
        -:  534:       64,   64,   64,   64,  317,  317,  317,   64,   64,   64,
        -:  535:      317,  317,   64,   64,    0,  315,  315,  315,  315
        -:  536:    } ;
        -:  537:
        -:  538:static yyconst flex_int16_t yy_nxt[609] =
        -:  539:    {   0,
        -:  540:        6,    7,    8,    9,   10,   11,   12,   13,   14,   14,
        -:  541:       15,   16,   14,   17,   18,   19,   20,   14,   21,   22,
        -:  542:       23,   20,   14,   24,   14,   25,    6,   26,   27,   28,
        -:  543:       29,   30,   31,   32,   33,   34,   32,   32,   35,   32,
        -:  544:       32,   36,   37,   38,   39,   40,   32,   32,   41,   42,
        -:  545:       32,   14,   43,   14,   44,   45,   46,   47,   48,   49,
        -:  546:       50,   51,   52,   52,   53,   54,   52,   55,   56,   57,
        -:  547:       58,   52,   59,   60,   61,   58,   52,   62,   52,   63,
        -:  548:       44,   64,   65,   66,   67,   68,   69,   70,   71,   72,
        -:  549:       70,   70,   73,   70,   70,   74,   75,   76,   77,   78,
        -:  550:
        -:  551:       70,   70,   79,   80,   70,   52,   81,   52,   88,   88,
        -:  552:      104,   91,   89,  194,  137,   86,   86,   89,  105,   90,
        -:  553:       86,   92,   95,   93,   97,  116,   95,   95,   93,   95,
        -:  554:       94,   95,  106,  114,  108,   83,  107,  115,  109,  117,
        -:  555:      119,   95,  110,   84,  129,  126,  130,  120,  129,  132,
        -:  556:      142,  130,  127,  131,  127,  133,  136,  134,  127,  137,
        -:  557:      136,  136,  134,  136,  135,  136,  140,  139,  141,  124,
        -:  558:      137,  143,  137,  158,  137,  136,  137,  137,  152,  137,
        -:  559:       84,  137,  126,  198,  137,  137,  137,  137,  137,  137,
        -:  560:      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
        -:  561:
        -:  562:      137,  137,  137,  137,  137,  137,  137,  138,  137,  137,
        -:  563:      137,  144,  156,  146,  148,  137,  151,  147,  149,  145,
        -:  564:      154,  159,  150,  195,  155,  201,  157,  137,  160,  196,
        -:  565:      137,  137,  137,  183,  137,  137,  137,  162,  165,  137,
        -:  566:      137,  137,  162,  165,  163,  166,   92,  199,   93,  190,
        -:  567:      137,  197,  184,   93,  190,   94,  191,  192,  133,  200,
        -:  568:      134,  202,  192,  204,  193,  134,  137,  135,  137,  203,
        -:  569:      137,  137,  205,  206,  207,  208,  209,  210,  212,  213,
        -:  570:      137,  137,  137,  137,  137,  239,  137,  137,  214,  215,
        -:  571:      216,  137,  137,  137,  162,  240,  211,  137,  137,  162,
        -:  572:
        -:  573:      137,  163,  137,   89,  165,  241,  137,  190,   89,  165,
        -:  574:       90,  166,  190,  192,  191,  137,  242,  243,  192,  249,
        -:  575:      193,  244,  137,  245,  137,  246,  248,  137,  137,  247,
        -:  576:      137,  137,  250,  137,  137,  251,  252,  137,  253,  254,
        -:  577:      137,  256,  137,  257,  137,  258,  259,  276,  260,  137,
        -:  578:      137,  275,  278,  277,  279,  137,  137,  137,  137,  137,
        -:  579:      137,  137,  137,  280,  137,  281,  137,  282,  283,  137,
        -:  580:      137,  284,  285,  286,  287,  137,  288,  137,  297,  298,
        -:  581:      300,  299,  302,  137,  137,  137,  301,  312,  137,  137,
        -:  582:      137,  303,  137,  137,  137,  137,  304,  137,  137,  313,
        -:  583:
        -:  584:      309,  310,  137,  137,  137,  311,  137,  314,  137,  137,
        -:  585:      137,  137,  308,  307,  306,  137,   84,   84,   84,  122,
        -:  586:      305,  122,  125,  125,  125,  137,  137,  137,  137,  137,
        -:  587:      137,  296,  295,  294,  293,  292,  291,  290,  289,  137,
        -:  588:      137,  137,  137,  137,  137,  137,  137,  274,  273,  272,
        -:  589:      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
        -:  590:      261,  255,  137,  165,  162,  238,  237,  236,  235,  234,
        -:  591:      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
        -:  592:      223,  222,  221,  220,  219,  218,  217,  165,  162,  137,
        -:  593:      137,   93,  164,  123,  189,  188,  187,  186,  185,  182,
        -:  594:
        -:  595:      181,  180,  179,  178,  177,  176,  175,  174,  173,  172,
        -:  596:      171,  170,  169,  168,  167,   93,  164,   85,   82,  161,
        -:  597:      153,  137,  127,   96,  124,  124,  127,  128,  127,  124,
        -:  598:      123,  121,  118,  113,  112,  111,  103,  102,  101,  100,
        -:  599:       99,   98,   86,   96,   83,   83,   86,   87,   86,   85,
        -:  600:       83,   82,  315,    5,  315,  315,  315,  315,  315,  315,
        -:  601:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  602:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  603:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  604:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  605:
        -:  606:      315,  315,  315,  315,  315,  315,  315,  315
        -:  607:    } ;
        -:  608:
        -:  609:static yyconst flex_int16_t yy_chk[609] =
        -:  610:    {   0,
        -:  611:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  612:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  613:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  614:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  615:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  616:        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        -:  617:        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        -:  618:        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        -:  619:        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        -:  620:        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        -:  621:
        -:  622:        3,    3,    3,    3,    3,    3,    3,    3,   16,   17,
        -:  623:       33,   19,   18,  138,  138,   17,   16,   18,   33,   18,
        -:  624:       19,   20,   22,   20,  317,   40,   22,   22,   20,   22,
        -:  625:       20,   22,   34,   39,   35,   22,   34,   39,   35,   40,
        -:  626:       42,   22,   35,   48,   54,   48,   56,   42,   55,   57,
        -:  627:       68,   56,   54,   56,   55,   58,   60,   58,   57,   68,
        -:  628:       60,   60,   58,   60,   58,   60,   66,   65,   67,   60,
        -:  629:       65,   69,   66,   79,  314,   60,   64,   69,   75,   79,
        -:  630:      125,   75,  125,  142,   67,  142,   64,   64,   64,   64,
        -:  631:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  632:
        -:  633:       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
        -:  634:       64,   71,   78,   72,   73,  313,   74,   72,   73,   71,
        -:  635:       77,   80,   73,  139,   77,  145,   78,  145,   80,  140,
        -:  636:       78,   71,   72,  115,   73,   74,  140,   89,   92,  139,
        -:  637:       77,   80,   89,   92,   89,   92,   93,  143,   93,  130,
        -:  638:      143,  141,  115,   93,  130,   93,  130,  133,  134,  144,
        -:  639:      134,  146,  133,  149,  133,  134,  141,  134,  144,  148,
        -:  640:      149,  148,  150,  151,  152,  153,  154,  155,  156,  157,
        -:  641:      150,  146,  157,  154,  309,  194,  152,  153,  158,  159,
        -:  642:      160,  194,  159,  151,  162,  195,  155,  155,  156,  162,
        -:  643:
        -:  644:      158,  162,  160,  164,  165,  196,  196,  190,  164,  165,
        -:  645:      164,  165,  190,  192,  190,  195,  197,  198,  192,  205,
        -:  646:      192,  200,  200,  201,  201,  202,  204,  202,  197,  203,
        -:  647:      203,  205,  206,  198,  206,  207,  208,  208,  209,  210,
        -:  648:      204,  212,  207,  213,  213,  214,  215,  241,  216,  215,
        -:  649:      212,  240,  245,  242,  246,  209,  210,  216,  245,  241,
        -:  650:      242,  240,  214,  248,  248,  249,  249,  250,  251,  251,
        -:  651:      246,  253,  255,  256,  259,  255,  260,  253,  276,  277,
        -:  652:      280,  278,  284,  250,  278,  276,  281,  307,  281,  256,
        -:  653:      284,  285,  260,  280,  259,  277,  287,  299,  285,  308,
        -:  654:
        -:  655:      299,  304,  304,  287,  310,  305,  303,  310,  302,  301,
        -:  656:      300,  298,  297,  296,  291,  308,  316,  316,  316,  318,
        -:  657:      289,  318,  319,  319,  319,  288,  286,  283,  282,  279,
        -:  658:      275,  273,  271,  270,  267,  266,  264,  263,  262,  258,
        -:  659:      257,  254,  252,  247,  244,  243,  239,  238,  237,  234,
        -:  660:      233,  231,  229,  228,  227,  226,  224,  223,  220,  219,
        -:  661:      218,  211,  199,  193,  191,  189,  188,  187,  186,  185,
        -:  662:      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
        -:  663:      174,  173,  171,  170,  169,  168,  167,  166,  163,  147,
        -:  664:      137,  135,  131,  123,  120,  119,  118,  117,  116,  114,
        -:  665:
        -:  666:      113,  112,  111,  110,  109,  108,  106,  105,  104,  103,
        -:  667:      102,  101,  100,   99,   98,   94,   90,   84,   82,   81,
        -:  668:       76,   70,   63,   62,   61,   59,   53,   51,   50,   47,
        -:  669:       45,   43,   41,   38,   37,   36,   31,   30,   29,   28,
        -:  670:       27,   26,   25,   24,   23,   21,   15,   13,   12,   10,
        -:  671:        9,    7,    5,  315,  315,  315,  315,  315,  315,  315,
        -:  672:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  673:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  674:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  675:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:  676:
        -:  677:      315,  315,  315,  315,  315,  315,  315,  315
        -:  678:    } ;
        -:  679:
        -:  680:static yy_state_type yy_last_accepting_state;
        -:  681:static char *yy_last_accepting_cpos;
        -:  682:
        -:  683:extern int yy_flex_debug;
        -:  684:int yy_flex_debug = 0;
        -:  685:
        -:  686:/* The intent behind this definition is that it'll catch
        -:  687: * any uses of REJECT which flex missed.
        -:  688: */
        -:  689:#define REJECT reject_used_but_not_detected
        -:  690:#define yymore() yymore_used_but_not_detected
        -:  691:#define YY_MORE_ADJ 0
        -:  692:#define YY_RESTORE_YY_MORE_OFFSET
        -:  693:char *yytext;
        -:  694:#line 1 "../../bc/scan.l"
        -:  695:/*  This file is part of GNU bc.
        -:  696:
        -:  697:    Copyright (C) 1991-1994, 1997, 2006, 2008, 2012-2017 Free Software Foundation, Inc.
        -:  698:
        -:  699:    This program is free software; you can redistribute it and/or modify
        -:  700:    it under the terms of the GNU General Public License as published by
        -:  701:    the Free Software Foundation; either version 3 of the License , or
        -:  702:    (at your option) any later version.
        -:  703:
        -:  704:    This program is distributed in the hope that it will be useful,
        -:  705:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:  706:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:  707:    GNU General Public License for more details.
        -:  708:
        -:  709:    You should have received a copy of the GNU General Public License
        -:  710:    along with this program; see the file COPYING.  If not, see
        -:  711:    <http://www.gnu.org/licenses>.
        -:  712:
        -:  713:    You may contact the author by:
        -:  714:       e-mail:  philnelson@acm.org
        -:  715:      us-mail:  Philip A. Nelson
        -:  716:                Computer Science Department, 9062
        -:  717:                Western Washington University
        -:  718:                Bellingham, WA 98226-9062
        -:  719:       
        -:  720:*************************************************************************/
        -:  721:/* scan.l: the (f)lex description file for the scanner. */
        -:  722:#line 31 "../../bc/scan.l"
        -:  723:
        -:  724:#include "bcdefs.h"
        -:  725:#include "bc.h"
        -:  726:#include "global.h"
        -:  727:#include "proto.h"
        -:  728:#include <errno.h>
        -:  729:
        -:  730:/* Using flex, we can ask for a smaller input buffer.  With lex, this
        -:  731:   does nothing! */
        -:  732:
        -:  733:#ifdef SMALL_BUF
        -:  734:#undef YY_READ_BUF_SIZE
        -:  735:#define YY_READ_BUF_SIZE 512
        -:  736:#endif
        -:  737:
        -:  738:/* Force . as last for now. */
        -:  739:#define DOT_IS_LAST
        -:  740:
        -:  741:/* We want to define our own yywrap. */
        -:  742:#undef yywrap
        -:  743:int yywrap (void);
        -:  744:
        -:  745:#if defined(LIBEDIT)
        -:  746:/* Support for the BSD libedit with history for
        -:  747:   nicer input on the interactive part of input. */
        -:  748:
        -:  749:#include <histedit.h>
        -:  750:
        -:  751:/* Have input call the following function. */
        -:  752:#undef  YY_INPUT
        -:  753:#define YY_INPUT(buf,result,max_size) \
        -:  754:		bcel_input((char *)buf, (yy_size_t *)&result, max_size)
        -:  755:
        -:  756:/* Variables to help interface editline with bc. */
        -:  757:static const char *bcel_line = (char *)NULL;
        -:  758:static int   bcel_len = 0;
        -:  759:
        -:  760:/* bcel_input puts upto MAX characters into BUF with the number put in
        -:  761:   BUF placed in *RESULT.  If the yy input file is the same as
        -:  762:   stdin, use editline.  Otherwise, just read it.
        -:  763:*/
        -:  764:
        -:  765:static void
        -:  766:bcel_input (char *buf, yy_size_t  *result, int max)
        -:  767:{
        -:  768:  ssize_t rdsize;
        -:  769:  if (!edit || yyin != stdin)
        -:  770:    {
        -:  771:      while ( (rdsize = read( fileno(yyin), buf, max )) < 0 )
        -:  772:        if (errno != EINTR)
        -:  773:	  {
        -:  774:	    yyerror( "read() in flex scanner failed" );
        -:  775:	    bc_exit (1);
        -:  776:	  }
        -:  777:      *result = (yy_size_t) rdsize;
        -:  778:      return;
        -:  779:    }
        -:  780:
        -:  781:  /* Do we need a new string? */
        -:  782:  if (bcel_len == 0)
        -:  783:    {
        -:  784:      bcel_line = el_gets(edit, &bcel_len);
        -:  785:      if (bcel_line == NULL) {
        -:  786:	/* end of file */
        -:  787:	*result = 0;
        -:  788:	bcel_len = 0;
        -:  789:	return;
        -:  790:      }
        -:  791:      if (bcel_len != 0)
        -:  792:	history (hist, &histev, H_ENTER, bcel_line); 
        -:  793:      fflush (stdout);
        -:  794:    }
        -:  795:
        -:  796:  if (bcel_len <= max)
        -:  797:    {
        -:  798:      strncpy (buf, bcel_line, bcel_len);
        -:  799:      *result = bcel_len;
        -:  800:      bcel_len = 0;
        -:  801:    }
        -:  802:  else
        -:  803:    {
        -:  804:      strncpy (buf, bcel_line, max);
        -:  805:      *result = max;
        -:  806:      bcel_line += max;
        -:  807:      bcel_len -= max;
        -:  808:    }
        -:  809:}
        -:  810:#endif
        -:  811:
        -:  812:#ifdef READLINE
        -:  813:/* Support for the readline and history libraries.  This allows
        -:  814:   nicer input on the interactive part of input. */
        -:  815:
        -:  816:/* Have input call the following function. */
        -:  817:#undef  YY_INPUT
        -:  818:#define YY_INPUT(buf,result,max_size) \
        -:  819:		rl_input((char *)buf, &result, max_size)
        -:  820:
        -:  821:/* Variables to help interface readline with bc. */
        -:  822:static char *rl_line = (char *)NULL;
        -:  823:static char *rl_start = (char *)NULL;
        -:  824:static int   rl_len = 0;
        -:  825:
        -:  826:/* Definitions for readline access. */
        -:  827:extern FILE *rl_instream;
        -:  828:
        -:  829:/* rl_input puts upto MAX characters into BUF with the number put in
        -:  830:   BUF placed in *RESULT.  If the yy input file is the same as
        -:  831:   rl_instream (stdin), use readline.  Otherwise, just read it.
        -:  832:*/
        -:  833:
        -:  834:static void
        -:  835:rl_input (char *buf, int *result, int max)
        -:  836:{
        -:  837:  if (yyin != rl_instream)
        -:  838:    {
        -:  839:      while ( (*result = read( fileno(yyin), buf, max )) < 0 )
        -:  840:        if (errno != EINTR)
        -:  841:	  {
        -:  842:	    yyerror( "read() in flex scanner failed" );
        -:  843:	    bc_exit (1);
        -:  844:	  }
        -:  845:      return;
        -:  846:    }
        -:  847:
        -:  848:  /* Do we need a new string? */
        -:  849:  if (rl_len == 0)
        -:  850:    {
        -:  851:      if (rl_start)
        -:  852:	free(rl_start);
        -:  853:      rl_start = readline ("");
        -:  854:      if (rl_start == NULL) {
        -:  855:	/* end of file */
        -:  856:	*result = 0;
        -:  857:	rl_len = 0;
        -:  858:	return;
        -:  859:      }
        -:  860:      rl_line = rl_start;
        -:  861:      rl_len = strlen (rl_line)+1;
        -:  862:      if (rl_len != 1)
        -:  863:	add_history (rl_line); 
        -:  864:      rl_line[rl_len-1] = '\n';
        -:  865:      fflush (stdout);
        -:  866:    }
        -:  867:
        -:  868:  if (rl_len <= max)
        -:  869:    {
        -:  870:      strncpy (buf, rl_line, rl_len);
        -:  871:      *result = rl_len;
        -:  872:      rl_len = 0;
        -:  873:    }
        -:  874:  else
        -:  875:    {
        -:  876:      strncpy (buf, rl_line, max);
        -:  877:      *result = max;
        -:  878:      rl_line += max;
        -:  879:      rl_len -= max;
        -:  880:    }
        -:  881:}
        -:  882:#endif
        -:  883:
        -:  884:#if !defined(READLINE) && !defined(LIBEDIT)
        -:  885:
        -:  886:/* MINIX returns from read with < 0 if SIGINT is  encountered.
        -:  887:   In flex, we can redefine YY_INPUT to the following.  In lex, this
        -:  888:   does nothing! */
        -:  889:#undef  YY_INPUT
        -:  890:#define YY_INPUT(buf,result,max_size) \
        -:  891:	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
        -:  892:	    if (errno != EINTR) \
        -:  893:		YY_FATAL_ERROR( "read() in flex scanner failed" );
        -:  894:#endif
        -:  895:
        -:  896:
        -:  897:#line 898 "scan.c"
        -:  898:
        -:  899:#define INITIAL 0
        -:  900:#define slcomment 1
        -:  901:
        -:  902:#ifndef YY_NO_UNISTD_H
        -:  903:/* Special case for "unistd.h", since it is non-ANSI. We include it way
        -:  904: * down here because we want the user's section 1 to have been scanned first.
        -:  905: * The user has a chance to override it with an option.
        -:  906: */
        -:  907:#include <unistd.h>
        -:  908:#endif
        -:  909:
        -:  910:#ifndef YY_EXTRA_TYPE
        -:  911:#define YY_EXTRA_TYPE void *
        -:  912:#endif
        -:  913:
        -:  914:static int yy_init_globals (void );
        -:  915:
        -:  916:/* Accessor methods to globals.
        -:  917:   These are made visible to non-reentrant scanners for convenience. */
        -:  918:
        -:  919:int yylex_destroy (void );
        -:  920:
        -:  921:int yyget_debug (void );
        -:  922:
        -:  923:void yyset_debug (int debug_flag  );
        -:  924:
        -:  925:YY_EXTRA_TYPE yyget_extra (void );
        -:  926:
        -:  927:void yyset_extra (YY_EXTRA_TYPE user_defined  );
        -:  928:
        -:  929:FILE *yyget_in (void );
        -:  930:
        -:  931:void yyset_in  (FILE * _in_str  );
        -:  932:
        -:  933:FILE *yyget_out (void );
        -:  934:
        -:  935:void yyset_out  (FILE * _out_str  );
        -:  936:
        -:  937:int yyget_leng (void );
        -:  938:
        -:  939:char *yyget_text (void );
        -:  940:
        -:  941:int yyget_lineno (void );
        -:  942:
        -:  943:void yyset_lineno (int _line_number  );
        -:  944:
        -:  945:/* Macros after this point can all be overridden by user definitions in
        -:  946: * section 1.
        -:  947: */
        -:  948:
        -:  949:#ifndef YY_SKIP_YYWRAP
        -:  950:#ifdef __cplusplus
        -:  951:extern "C" int yywrap (void );
        -:  952:#else
        -:  953:extern int yywrap (void );
        -:  954:#endif
        -:  955:#endif
        -:  956:
        -:  957:#ifndef YY_NO_UNPUT
        -:  958:    
        -:  959:    static void yyunput (int c,char *buf_ptr  );
        -:  960:    
        -:  961:#endif
        -:  962:
        -:  963:#ifndef yytext_ptr
        -:  964:static void yy_flex_strncpy (char *,yyconst char *,int );
        -:  965:#endif
        -:  966:
        -:  967:#ifdef YY_NEED_STRLEN
        -:  968:static int yy_flex_strlen (yyconst char * );
        -:  969:#endif
        -:  970:
        -:  971:#ifndef YY_NO_INPUT
        -:  972:
        -:  973:#ifdef __cplusplus
        -:  974:static int yyinput (void );
        -:  975:#else
        -:  976:static int input (void );
        -:  977:#endif
        -:  978:
        -:  979:#endif
        -:  980:
        -:  981:/* Amount of stuff to slurp up with each read. */
        -:  982:#ifndef YY_READ_BUF_SIZE
        -:  983:#define YY_READ_BUF_SIZE 8192
        -:  984:#endif
        -:  985:
        -:  986:/* Copy whatever the last rule matched to the standard output. */
        -:  987:#ifndef ECHO
        -:  988:/* This used to be an fputs(), but since the string might contain NUL's,
        -:  989: * we now use fwrite().
        -:  990: */
        -:  991:#define ECHO fwrite( yytext, yyleng, 1, yyout )
        -:  992:#endif
        -:  993:
        -:  994:/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
        -:  995: * is returned in "result".
        -:  996: */
        -:  997:#ifndef YY_INPUT
        -:  998:#define YY_INPUT(buf,result,max_size) \
        -:  999:	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        -: 1000:		{ \
        -: 1001:		int c = '*'; \
        -: 1002:		size_t n; \
        -: 1003:		for ( n = 0; n < max_size && \
        -: 1004:			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
        -: 1005:			buf[n] = (char) c; \
        -: 1006:		if ( c == '\n' ) \
        -: 1007:			buf[n++] = (char) c; \
        -: 1008:		if ( c == EOF && ferror( yyin ) ) \
        -: 1009:			YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -: 1010:		result = n; \
        -: 1011:		} \
        -: 1012:	else \
        -: 1013:		{ \
        -: 1014:		errno=0; \
        -: 1015:		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
        -: 1016:			{ \
        -: 1017:			if( errno != EINTR) \
        -: 1018:				{ \
        -: 1019:				YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -: 1020:				break; \
        -: 1021:				} \
        -: 1022:			errno=0; \
        -: 1023:			clearerr(yyin); \
        -: 1024:			} \
        -: 1025:		}\
        -: 1026:\
        -: 1027:
        -: 1028:#endif
        -: 1029:
        -: 1030:/* No semi-colon after return; correct usage is to write "yyterminate();" -
        -: 1031: * we don't want an extra ';' after the "return" because that will cause
        -: 1032: * some compilers to complain about unreachable statements.
        -: 1033: */
        -: 1034:#ifndef yyterminate
        -: 1035:#define yyterminate() return YY_NULL
        -: 1036:#endif
        -: 1037:
        -: 1038:/* Number of entries by which start-condition stack grows. */
        -: 1039:#ifndef YY_START_STACK_INCR
        -: 1040:#define YY_START_STACK_INCR 25
        -: 1041:#endif
        -: 1042:
        -: 1043:/* Report a fatal error. */
        -: 1044:#ifndef YY_FATAL_ERROR
        -: 1045:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
        -: 1046:#endif
        -: 1047:
        -: 1048:/* end tables serialization structures and prototypes */
        -: 1049:
        -: 1050:/* Default declaration of generated scanner - a define so the user can
        -: 1051: * easily add parameters.
        -: 1052: */
        -: 1053:#ifndef YY_DECL
        -: 1054:#define YY_DECL_IS_OURS 1
        -: 1055:
        -: 1056:extern int yylex (void);
        -: 1057:
        -: 1058:#define YY_DECL int yylex (void)
        -: 1059:#endif /* !YY_DECL */
        -: 1060:
        -: 1061:/* Code executed at the beginning of each rule, after yytext and yyleng
        -: 1062: * have been set up.
        -: 1063: */
        -: 1064:#ifndef YY_USER_ACTION
        -: 1065:#define YY_USER_ACTION
        -: 1066:#endif
        -: 1067:
        -: 1068:/* Code executed at the end of each rule. */
        -: 1069:#ifndef YY_BREAK
        -: 1070:#define YY_BREAK /*LINTED*/break;
        -: 1071:#endif
        -: 1072:
        -: 1073:#define YY_RULE_SETUP \
        -: 1074:	YY_USER_ACTION
        -: 1075:
        -: 1076:/** The main scanner function which does all the work.
        -: 1077: */
function yylex called 0 returned 0% blocks executed 0%
    #####: 1078:YY_DECL
        -: 1079:{
        -: 1080:	register yy_state_type yy_current_state;
        -: 1081:	register char *yy_cp, *yy_bp;
        -: 1082:	register int yy_act;
        -: 1083:    
        -: 1084:#line 208 "../../bc/scan.l"
        -: 1085:
        -: 1086:#line 1087 "scan.c"
        -: 1087:
    #####: 1088:	if ( !(yy_init) )
branch  0 never executed
branch  1 never executed
        -: 1089:		{
    #####: 1090:		(yy_init) = 1;
        -: 1091:
        -: 1092:#ifdef YY_USER_INIT
        -: 1093:		YY_USER_INIT;
        -: 1094:#endif
        -: 1095:
    #####: 1096:		if ( ! (yy_start) )
branch  0 never executed
branch  1 never executed
    #####: 1097:			(yy_start) = 1;	/* first start state */
        -: 1098:
    #####: 1099:		if ( ! yyin )
branch  0 never executed
branch  1 never executed
    #####: 1100:			yyin = stdin;
        -: 1101:
    #####: 1102:		if ( ! yyout )
branch  0 never executed
branch  1 never executed
    #####: 1103:			yyout = stdout;
        -: 1104:
    #####: 1105:		if ( ! YY_CURRENT_BUFFER ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1106:			yyensure_buffer_stack ();
    #####: 1107:			YY_CURRENT_BUFFER_LVALUE =
    #####: 1108:				yy_create_buffer(yyin,YY_BUF_SIZE );
    #####: 1109:		}
        -: 1110:
    #####: 1111:		yy_load_buffer_state( );
    #####: 1112:		}
        -: 1113:
    #####: 1114:	while (/*CONSTCOND*/ 1 )		/* loops until end-of-file is reached */
        -: 1115:		{
    #####: 1116:		yy_cp = (yy_c_buf_p);
        -: 1117:
        -: 1118:		/* Support of yytext. */
    #####: 1119:		*yy_cp = (yy_hold_char);
        -: 1120:
        -: 1121:		/* yy_bp points to the position in yy_ch_buf of the start of
        -: 1122:		 * the current run.
        -: 1123:		 */
        -: 1124:		yy_bp = yy_cp;
        -: 1125:
    #####: 1126:		yy_current_state = (yy_start);
        -: 1127:yy_match:
    #####: 1128:		do
        -: 1129:			{
    #####: 1130:			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
    #####: 1131:			if ( yy_accept[yy_current_state] )
branch  0 never executed
branch  1 never executed
        -: 1132:				{
    #####: 1133:				(yy_last_accepting_state) = yy_current_state;
    #####: 1134:				(yy_last_accepting_cpos) = yy_cp;
    #####: 1135:				}
    #####: 1136:			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
branch  0 never executed
branch  1 never executed
        -: 1137:				{
    #####: 1138:				yy_current_state = (int) yy_def[yy_current_state];
    #####: 1139:				if ( yy_current_state >= 316 )
branch  0 never executed
branch  1 never executed
    #####: 1140:					yy_c = yy_meta[(unsigned int) yy_c];
        -: 1141:				}
    #####: 1142:			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    #####: 1143:			++yy_cp;
    #####: 1144:			}
branch  0 never executed
branch  1 never executed
    #####: 1145:		while ( yy_base[yy_current_state] != 554 );
        -: 1146:
        -: 1147:yy_find_action:
    #####: 1148:		yy_act = yy_accept[yy_current_state];
    #####: 1149:		if ( yy_act == 0 )
branch  0 never executed
branch  1 never executed
        -: 1150:			{ /* have to back up */
    #####: 1151:			yy_cp = (yy_last_accepting_cpos);
    #####: 1152:			yy_current_state = (yy_last_accepting_state);
    #####: 1153:			yy_act = yy_accept[yy_current_state];
    #####: 1154:			}
        -: 1155:
    #####: 1156:		YY_DO_BEFORE_ACTION;
        -: 1157:
        -: 1158:do_action:	/* This label is used only to access EOF actions. */
        -: 1159:
    #####: 1160:		switch ( yy_act )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
        -: 1161:	{ /* beginning of action switch */
        -: 1162:			case 0: /* must back up */
        -: 1163:			/* undo the effects of YY_DO_BEFORE_ACTION */
    #####: 1164:			*yy_cp = (yy_hold_char);
    #####: 1165:			yy_cp = (yy_last_accepting_cpos);
    #####: 1166:			yy_current_state = (yy_last_accepting_state);
    #####: 1167:			goto yy_find_action;
        -: 1168:
        -: 1169:case 1:
        -: 1170:YY_RULE_SETUP
        -: 1171:#line 209 "../../bc/scan.l"
        -: 1172:{
        -: 1173: 		  if (!std_only)
        -: 1174:		    BEGIN(slcomment);
        -: 1175: 		  else
        -: 1176:		    yyerror ("illegal character: #");
        -: 1177:		}
        -: 1178:	YY_BREAK
        -: 1179:case 2:
        -: 1180:YY_RULE_SETUP
        -: 1181:#line 215 "../../bc/scan.l"
        -: 1182:{ BEGIN(INITIAL); }
        -: 1183:	YY_BREAK
        -: 1184:case 3:
        -: 1185:/* rule 3 can match eol */
        -: 1186:YY_RULE_SETUP
        -: 1187:#line 216 "../../bc/scan.l"
        -: 1188:{ line_no++; BEGIN(INITIAL); return(ENDOFLINE); }
        -: 1189:	YY_BREAK
        -: 1190:case 4:
        -: 1191:YY_RULE_SETUP
        -: 1192:#line 217 "../../bc/scan.l"
        -: 1193:return(Define);
        -: 1194:	YY_BREAK
        -: 1195:case 5:
        -: 1196:YY_RULE_SETUP
        -: 1197:#line 218 "../../bc/scan.l"
        -: 1198:return(Break);
        -: 1199:	YY_BREAK
        -: 1200:case 6:
        -: 1201:YY_RULE_SETUP
        -: 1202:#line 219 "../../bc/scan.l"
        -: 1203:return(Quit);
        -: 1204:	YY_BREAK
        -: 1205:case 7:
        -: 1206:YY_RULE_SETUP
        -: 1207:#line 220 "../../bc/scan.l"
        -: 1208:return(Length);
        -: 1209:	YY_BREAK
        -: 1210:case 8:
        -: 1211:YY_RULE_SETUP
        -: 1212:#line 221 "../../bc/scan.l"
        -: 1213:return(Return);
        -: 1214:	YY_BREAK
        -: 1215:case 9:
        -: 1216:YY_RULE_SETUP
        -: 1217:#line 222 "../../bc/scan.l"
        -: 1218:return(For);
        -: 1219:	YY_BREAK
        -: 1220:case 10:
        -: 1221:YY_RULE_SETUP
        -: 1222:#line 223 "../../bc/scan.l"
        -: 1223:return(If);
        -: 1224:	YY_BREAK
        -: 1225:case 11:
        -: 1226:YY_RULE_SETUP
        -: 1227:#line 224 "../../bc/scan.l"
        -: 1228:return(While);
        -: 1229:	YY_BREAK
        -: 1230:case 12:
        -: 1231:YY_RULE_SETUP
        -: 1232:#line 225 "../../bc/scan.l"
        -: 1233:return(Sqrt);
        -: 1234:	YY_BREAK
        -: 1235:case 13:
        -: 1236:YY_RULE_SETUP
        -: 1237:#line 226 "../../bc/scan.l"
        -: 1238:return(Scale);
        -: 1239:	YY_BREAK
        -: 1240:case 14:
        -: 1241:YY_RULE_SETUP
        -: 1242:#line 227 "../../bc/scan.l"
        -: 1243:return(Ibase);
        -: 1244:	YY_BREAK
        -: 1245:case 15:
        -: 1246:YY_RULE_SETUP
        -: 1247:#line 228 "../../bc/scan.l"
        -: 1248:return(Obase);
        -: 1249:	YY_BREAK
        -: 1250:case 16:
        -: 1251:YY_RULE_SETUP
        -: 1252:#line 229 "../../bc/scan.l"
        -: 1253:return(Auto);
        -: 1254:	YY_BREAK
        -: 1255:case 17:
        -: 1256:YY_RULE_SETUP
        -: 1257:#line 230 "../../bc/scan.l"
        -: 1258:return(Else);
        -: 1259:	YY_BREAK
        -: 1260:case 18:
        -: 1261:YY_RULE_SETUP
        -: 1262:#line 231 "../../bc/scan.l"
        -: 1263:return(Read);
        -: 1264:	YY_BREAK
        -: 1265:case 19:
        -: 1266:YY_RULE_SETUP
        -: 1267:#line 232 "../../bc/scan.l"
        -: 1268:return(Random);
        -: 1269:	YY_BREAK
        -: 1270:case 20:
        -: 1271:YY_RULE_SETUP
        -: 1272:#line 233 "../../bc/scan.l"
        -: 1273:return(Halt);
        -: 1274:	YY_BREAK
        -: 1275:case 21:
        -: 1276:YY_RULE_SETUP
        -: 1277:#line 234 "../../bc/scan.l"
        -: 1278:return(Last);
        -: 1279:	YY_BREAK
        -: 1280:case 22:
        -: 1281:YY_RULE_SETUP
        -: 1282:#line 235 "../../bc/scan.l"
        -: 1283:return(Void); 
        -: 1284:	YY_BREAK
        -: 1285:case 23:
        -: 1286:YY_RULE_SETUP
        -: 1287:#line 236 "../../bc/scan.l"
        -: 1288:{
        -: 1289:#if defined(READLINE) || defined(LIBEDIT)
        -: 1290:	  return(HistoryVar);
        -: 1291:#else
        -: 1292:	  yylval.s_value = strcopyof(yytext); return(NAME);
        -: 1293:#endif
        -: 1294:	}
        -: 1295:	YY_BREAK
        -: 1296:case 24:
        -: 1297:YY_RULE_SETUP
        -: 1298:#line 244 "../../bc/scan.l"
        -: 1299:return(Warranty);
        -: 1300:	YY_BREAK
        -: 1301:case 25:
        -: 1302:YY_RULE_SETUP
        -: 1303:#line 245 "../../bc/scan.l"
        -: 1304:return(Continue);
        -: 1305:	YY_BREAK
        -: 1306:case 26:
        -: 1307:YY_RULE_SETUP
        -: 1308:#line 246 "../../bc/scan.l"
        -: 1309:return(Print);
        -: 1310:	YY_BREAK
        -: 1311:case 27:
        -: 1312:YY_RULE_SETUP
        -: 1313:#line 247 "../../bc/scan.l"
        -: 1314:return(Limits);
        -: 1315:	YY_BREAK
        -: 1316:case 28:
        -: 1317:YY_RULE_SETUP
        -: 1318:#line 248 "../../bc/scan.l"
        -: 1319:{
        -: 1320:#ifdef DOT_IS_LAST
        -: 1321:       return(Last);
        -: 1322:#else
        -: 1323:       yyerror ("illegal character: %s",yytext);
        -: 1324:#endif
        -: 1325:    }
        -: 1326:	YY_BREAK
        -: 1327:case 29:
        -: 1328:YY_RULE_SETUP
        -: 1329:#line 255 "../../bc/scan.l"
        -: 1330:{ yylval.c_value = yytext[0]; 
        -: 1331:					      return((int)yytext[0]); }
        -: 1332:	YY_BREAK
        -: 1333:case 30:
        -: 1334:YY_RULE_SETUP
        -: 1335:#line 257 "../../bc/scan.l"
        -: 1336:{ return(AND); }
        -: 1337:	YY_BREAK
        -: 1338:case 31:
        -: 1339:YY_RULE_SETUP
        -: 1340:#line 258 "../../bc/scan.l"
        -: 1341:{ return(OR); }
        -: 1342:	YY_BREAK
        -: 1343:case 32:
        -: 1344:YY_RULE_SETUP
        -: 1345:#line 259 "../../bc/scan.l"
        -: 1346:{ return(NOT); }
        -: 1347:	YY_BREAK
        -: 1348:case 33:
        -: 1349:YY_RULE_SETUP
        -: 1350:#line 260 "../../bc/scan.l"
        -: 1351:{ yylval.c_value = yytext[0]; return((int)yytext[0]); }
        -: 1352:	YY_BREAK
        -: 1353:case 34:
        -: 1354:YY_RULE_SETUP
        -: 1355:#line 261 "../../bc/scan.l"
        -: 1356:{ yylval.c_value = yytext[0]; return(ASSIGN_OP); }
        -: 1357:	YY_BREAK
        -: 1358:case 35:
        -: 1359:YY_RULE_SETUP
        -: 1360:#line 262 "../../bc/scan.l"
        -: 1361:{ 
        -: 1362:#ifdef OLD_EQ_OP
        -: 1363:			 char warn_save;
        -: 1364:			 warn_save = warn_not_std;
        -: 1365:			 warn_not_std = TRUE;
        -: 1366:			 ct_warn ("Old fashioned =<op>");
        -: 1367:			 warn_not_std = warn_save;
        -: 1368:			 yylval.c_value = yytext[1];
        -: 1369:#else
        -: 1370:			 yylval.c_value = '=';
        -: 1371:			 yyless (1);
        -: 1372:#endif
        -: 1373:			 return(ASSIGN_OP);
        -: 1374:		       }
        -: 1375:	YY_BREAK
        -: 1376:case 36:
        -: 1377:YY_RULE_SETUP
        -: 1378:#line 276 "../../bc/scan.l"
        -: 1379:{ yylval.s_value = strcopyof(yytext); return(REL_OP); }
        -: 1380:	YY_BREAK
        -: 1381:case 37:
        -: 1382:YY_RULE_SETUP
        -: 1383:#line 277 "../../bc/scan.l"
        -: 1384:{ yylval.c_value = yytext[0]; return(INCR_DECR); }
        -: 1385:	YY_BREAK
        -: 1386:case 38:
        -: 1387:/* rule 38 can match eol */
        -: 1388:YY_RULE_SETUP
        -: 1389:#line 278 "../../bc/scan.l"
        -: 1390:{ line_no++; return(ENDOFLINE); }
        -: 1391:	YY_BREAK
        -: 1392:case 39:
        -: 1393:/* rule 39 can match eol */
        -: 1394:YY_RULE_SETUP
        -: 1395:#line 279 "../../bc/scan.l"
        -: 1396:{  line_no++;  /* ignore a "quoted" newline */ }
        -: 1397:	YY_BREAK
        -: 1398:case 40:
        -: 1399:YY_RULE_SETUP
        -: 1400:#line 280 "../../bc/scan.l"
        -: 1401:{ /* ignore spaces and tabs */ }
        -: 1402:	YY_BREAK
        -: 1403:case 41:
        -: 1404:YY_RULE_SETUP
        -: 1405:#line 281 "../../bc/scan.l"
        -: 1406:{
        -: 1407:	int c;
        -: 1408:
        -: 1409:	for (;;)
        -: 1410:	  {
        -: 1411:	    while ( ((c=input()) != '*') && (c != EOF)) 
        -: 1412:	      /* eat it */
        -: 1413:	      if (c == '\n') line_no++;
        -: 1414:	    if (c == '*')
        -: 1415: 	      {
        -: 1416:		while ( (c=input()) == '*') /* eat it*/;
        -: 1417:		if (c == '/') break; /* at end of comment */
        -: 1418:		if (c == '\n') line_no++;
        -: 1419:	      }
        -: 1420:	    if (c == EOF)
        -: 1421:	      {
        -: 1422:		fprintf (stderr,"EOF encountered in a comment.\n");
        -: 1423:		break;
        -: 1424:	      }
        -: 1425:	  }
        -: 1426:      }
        -: 1427:	YY_BREAK
        -: 1428:case 42:
        -: 1429:YY_RULE_SETUP
        -: 1430:#line 302 "../../bc/scan.l"
        -: 1431:{ yylval.s_value = strcopyof(yytext); return(NAME); }
        -: 1432:	YY_BREAK
        -: 1433:case 43:
        -: 1434:/* rule 43 can match eol */
        -: 1435:YY_RULE_SETUP
        -: 1436:#line 303 "../../bc/scan.l"
        -: 1437:{
        -: 1438: 	      const char *look;
        -: 1439:	      int count = 0;
        -: 1440:	      yylval.s_value = strcopyof(yytext);
        -: 1441:	      for (look = yytext; *look != 0; look++)
        -: 1442:		{
        -: 1443:		  if (*look == '\n') line_no++;
        -: 1444:		  if (*look == '"')  count++;
        -: 1445:		}
        -: 1446:	      if (count != 2) yyerror ("NUL character in string.");
        -: 1447:	      return(STRING);
        -: 1448:	    }
        -: 1449:	YY_BREAK
        -: 1450:case 44:
        -: 1451:/* rule 44 can match eol */
        -: 1452:YY_RULE_SETUP
        -: 1453:#line 315 "../../bc/scan.l"
        -: 1454:{
        -: 1455:	      char *src, *dst;
        -: 1456:	      int len;
        -: 1457:	      /* remove a trailing decimal point. */
        -: 1458:	      len = strlen(yytext);
        -: 1459:	      if (yytext[len-1] == '.')
        -: 1460:	        yytext[len-1] = 0;
        -: 1461:	      /* remove leading zeros. */
        -: 1462:	      src = yytext;
        -: 1463:	      dst = yytext;
        -: 1464:	      while (*src == '0') src++;
        -: 1465:	      if (*src == 0) src--;
        -: 1466:	      /* Copy strings removing the newlines. */
        -: 1467:	      while (*src != 0)
        -: 1468:		{
        -: 1469:	          if (*src == '\\')
        -: 1470:		    {
        -: 1471:		      src++; src++;
        -: 1472:		      line_no++;
        -: 1473:		    }
        -: 1474:		  if (*src == ',')
        -: 1475:		    {
        -: 1476:		      src++;
        -: 1477:		      ct_warn("Commas in numbers");
        -: 1478:		    }		    
        -: 1479:		  else
        -: 1480:		    *dst++ = *src++;
        -: 1481:	        }
        -: 1482:	      *dst = 0;
        -: 1483:	      yylval.s_value = strcopyof(yytext); 
        -: 1484:	      return(NUMBER);
        -: 1485:	    }
        -: 1486:	YY_BREAK
        -: 1487:case 45:
        -: 1488:YY_RULE_SETUP
        -: 1489:#line 347 "../../bc/scan.l"
        -: 1490:{
        -: 1491:	  if (yytext[0] < ' ')
        -: 1492:	    yyerror ("illegal character: ^%c",yytext[0] + '@');
        -: 1493:	  else
        -: 1494:	    if (yytext[0] > '~')
        -: 1495:	      yyerror ("illegal character: \\%03o", (int) yytext[0]);
        -: 1496:	    else
        -: 1497:	      yyerror ("illegal character: %s",yytext);
        -: 1498:	}
        -: 1499:	YY_BREAK
        -: 1500:case 46:
        -: 1501:YY_RULE_SETUP
        -: 1502:#line 356 "../../bc/scan.l"
        -: 1503:ECHO;
        -: 1504:	YY_BREAK
        -: 1505:#line 1506 "scan.c"
        -: 1506:case YY_STATE_EOF(INITIAL):
        -: 1507:case YY_STATE_EOF(slcomment):
    #####: 1508:	yyterminate();
        -: 1509:
        -: 1510:	case YY_END_OF_BUFFER:
        -: 1511:		{
        -: 1512:		/* Amount of text matched not including the EOB char. */
    #####: 1513:		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
        -: 1514:
        -: 1515:		/* Undo the effects of YY_DO_BEFORE_ACTION. */
    #####: 1516:		*yy_cp = (yy_hold_char);
        -: 1517:		YY_RESTORE_YY_MORE_OFFSET
        -: 1518:
    #####: 1519:		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
branch  0 never executed
branch  1 never executed
        -: 1520:			{
        -: 1521:			/* We're scanning a new file or input source.  It's
        -: 1522:			 * possible that this happened because the user
        -: 1523:			 * just pointed yyin at a new source and called
        -: 1524:			 * yylex().  If so, then we have to assure
        -: 1525:			 * consistency between YY_CURRENT_BUFFER and our
        -: 1526:			 * globals.  Here is the right place to do so, because
        -: 1527:			 * this is the first action (other than possibly a
        -: 1528:			 * back-up) that will match for the new input source.
        -: 1529:			 */
    #####: 1530:			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    #####: 1531:			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
    #####: 1532:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
    #####: 1533:			}
        -: 1534:
        -: 1535:		/* Note that here we test for yy_c_buf_p "<=" to the position
        -: 1536:		 * of the first EOB in the buffer, since yy_c_buf_p will
        -: 1537:		 * already have been incremented past the NUL character
        -: 1538:		 * (since all states make transitions on EOB to the
        -: 1539:		 * end-of-buffer state).  Contrast this with the test
        -: 1540:		 * in input().
        -: 1541:		 */
    #####: 1542:		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
branch  0 never executed
branch  1 never executed
        -: 1543:			{ /* This was really a NUL. */
        -: 1544:			yy_state_type yy_next_state;
        -: 1545:
    #####: 1546:			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
        -: 1547:
    #####: 1548:			yy_current_state = yy_get_previous_state(  );
        -: 1549:
        -: 1550:			/* Okay, we're now positioned to make the NUL
        -: 1551:			 * transition.  We couldn't have
        -: 1552:			 * yy_get_previous_state() go ahead and do it
        -: 1553:			 * for us because it doesn't know how to deal
        -: 1554:			 * with the possibility of jamming (and we don't
        -: 1555:			 * want to build jamming into it because then it
        -: 1556:			 * will run more slowly).
        -: 1557:			 */
        -: 1558:
    #####: 1559:			yy_next_state = yy_try_NUL_trans( yy_current_state );
        -: 1560:
    #####: 1561:			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
        -: 1562:
    #####: 1563:			if ( yy_next_state )
branch  0 never executed
branch  1 never executed
        -: 1564:				{
        -: 1565:				/* Consume the NUL. */
    #####: 1566:				yy_cp = ++(yy_c_buf_p);
        -: 1567:				yy_current_state = yy_next_state;
    #####: 1568:				goto yy_match;
        -: 1569:				}
        -: 1570:
        -: 1571:			else
        -: 1572:				{
        -: 1573:				yy_cp = (yy_c_buf_p);
    #####: 1574:				goto yy_find_action;
        -: 1575:				}
        -: 1576:			}
        -: 1577:
    #####: 1578:		else switch ( yy_get_next_buffer(  ) )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1579:			{
        -: 1580:			case EOB_ACT_END_OF_FILE:
        -: 1581:				{
    #####: 1582:				(yy_did_buffer_switch_on_eof) = 0;
        -: 1583:
    #####: 1584:				if ( yywrap( ) )
branch  0 never executed
branch  1 never executed
        -: 1585:					{
        -: 1586:					/* Note: because we've taken care in
        -: 1587:					 * yy_get_next_buffer() to have set up
        -: 1588:					 * yytext, we can now set up
        -: 1589:					 * yy_c_buf_p so that if some total
        -: 1590:					 * hoser (like flex itself) wants to
        -: 1591:					 * call the scanner after we return the
        -: 1592:					 * YY_NULL, it'll still work - another
        -: 1593:					 * YY_NULL will get returned.
        -: 1594:					 */
    #####: 1595:					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
        -: 1596:
    #####: 1597:					yy_act = YY_STATE_EOF(YY_START);
    #####: 1598:					goto do_action;
        -: 1599:					}
        -: 1600:
        -: 1601:				else
        -: 1602:					{
    #####: 1603:					if ( ! (yy_did_buffer_switch_on_eof) )
branch  0 never executed
branch  1 never executed
    #####: 1604:						YY_NEW_FILE;
        -: 1605:					}
        -: 1606:				break;
        -: 1607:				}
        -: 1608:
        -: 1609:			case EOB_ACT_CONTINUE_SCAN:
    #####: 1610:				(yy_c_buf_p) =
    #####: 1611:					(yytext_ptr) + yy_amount_of_matched_text;
        -: 1612:
    #####: 1613:				yy_current_state = yy_get_previous_state(  );
        -: 1614:
    #####: 1615:				yy_cp = (yy_c_buf_p);
    #####: 1616:				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
    #####: 1617:				goto yy_match;
        -: 1618:
        -: 1619:			case EOB_ACT_LAST_MATCH:
    #####: 1620:				(yy_c_buf_p) =
    #####: 1621:				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
        -: 1622:
    #####: 1623:				yy_current_state = yy_get_previous_state(  );
        -: 1624:
    #####: 1625:				yy_cp = (yy_c_buf_p);
    #####: 1626:				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
    #####: 1627:				goto yy_find_action;
        -: 1628:			}
    #####: 1629:		break;
        -: 1630:		}
        -: 1631:
        -: 1632:	default:
    #####: 1633:		YY_FATAL_ERROR(
        -: 1634:			"fatal flex scanner internal error--no action found" );
        -: 1635:	} /* end of action switch */
        -: 1636:		} /* end of scanning one token */
    #####: 1637:} /* end of yylex */
        -: 1638:
        -: 1639:/* yy_get_next_buffer - try to read in a new buffer
        -: 1640: *
        -: 1641: * Returns a code representing an action:
        -: 1642: *	EOB_ACT_LAST_MATCH -
        -: 1643: *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
        -: 1644: *	EOB_ACT_END_OF_FILE - end of file
        -: 1645: */
function yy_get_next_buffer called 0 returned 0% blocks executed 0%
    #####: 1646:static int yy_get_next_buffer (void)
        -: 1647:{
    #####: 1648:    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    #####: 1649:	register char *source = (yytext_ptr);
        -: 1650:	register int number_to_move, i;
        -: 1651:	int ret_val;
        -: 1652:
    #####: 1653:	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
branch  0 never executed
branch  1 never executed
    #####: 1654:		YY_FATAL_ERROR(
        -: 1655:		"fatal flex scanner internal error--end of buffer missed" );
        -: 1656:
    #####: 1657:	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
branch  0 never executed
branch  1 never executed
        -: 1658:		{ /* Don't try to fill the buffer, so this is an EOF. */
    #####: 1659:		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
branch  0 never executed
branch  1 never executed
        -: 1660:			{
        -: 1661:			/* We matched a single character, the EOB, so
        -: 1662:			 * treat this as a final EOF.
        -: 1663:			 */
    #####: 1664:			return EOB_ACT_END_OF_FILE;
        -: 1665:			}
        -: 1666:
        -: 1667:		else
        -: 1668:			{
        -: 1669:			/* We matched some text prior to the EOB, first
        -: 1670:			 * process it.
        -: 1671:			 */
    #####: 1672:			return EOB_ACT_LAST_MATCH;
        -: 1673:			}
        -: 1674:		}
        -: 1675:
        -: 1676:	/* Try to read more data. */
        -: 1677:
        -: 1678:	/* First move last chars to start of buffer. */
    #####: 1679:	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
        -: 1680:
    #####: 1681:	for ( i = 0; i < number_to_move; ++i )
branch  0 never executed
branch  1 never executed
    #####: 1682:		*(dest++) = *(source++);
        -: 1683:
    #####: 1684:	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
branch  0 never executed
branch  1 never executed
        -: 1685:		/* don't do the read, it's not guaranteed to return an EOF,
        -: 1686:		 * just force an EOF
        -: 1687:		 */
    #####: 1688:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
        -: 1689:
        -: 1690:	else
        -: 1691:		{
        -: 1692:			int num_to_read =
    #####: 1693:			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        -: 1694:
    #####: 1695:		while ( num_to_read <= 0 )
branch  0 never executed
branch  1 never executed
        -: 1696:			{ /* Not enough room in the buffer - grow it. */
        -: 1697:
        -: 1698:			/* just a shorter name for the current buffer */
    #####: 1699:			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
branch  0 never executed
branch  1 never executed
        -: 1700:
        -: 1701:			int yy_c_buf_p_offset =
    #####: 1702:				(int) ((yy_c_buf_p) - b->yy_ch_buf);
        -: 1703:
    #####: 1704:			if ( b->yy_is_our_buffer )
branch  0 never executed
branch  1 never executed
        -: 1705:				{
    #####: 1706:				int new_size = b->yy_buf_size * 2;
        -: 1707:
    #####: 1708:				if ( new_size <= 0 )
branch  0 never executed
branch  1 never executed
    #####: 1709:					b->yy_buf_size += b->yy_buf_size / 8;
        -: 1710:				else
    #####: 1711:					b->yy_buf_size *= 2;
        -: 1712:
    #####: 1713:				b->yy_ch_buf = (char *)
        -: 1714:					/* Include room in for 2 EOB chars. */
    #####: 1715:					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
    #####: 1716:				}
        -: 1717:			else
        -: 1718:				/* Can't grow it, we don't own it. */
    #####: 1719:				b->yy_ch_buf = 0;
        -: 1720:
    #####: 1721:			if ( ! b->yy_ch_buf )
branch  0 never executed
branch  1 never executed
    #####: 1722:				YY_FATAL_ERROR(
        -: 1723:				"fatal error - scanner input buffer overflow" );
        -: 1724:
    #####: 1725:			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
        -: 1726:
    #####: 1727:			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
    #####: 1728:						number_to_move - 1;
        -: 1729:
        -: 1730:			}
        -: 1731:
    #####: 1732:		if ( num_to_read > YY_READ_BUF_SIZE )
branch  0 never executed
branch  1 never executed
    #####: 1733:			num_to_read = YY_READ_BUF_SIZE;
        -: 1734:
        -: 1735:		/* Read in more data. */
    #####: 1736:		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1737:			(yy_n_chars), (size_t) num_to_read );
        -: 1738:
    #####: 1739:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        -: 1740:		}
        -: 1741:
    #####: 1742:	if ( (yy_n_chars) == 0 )
branch  0 never executed
branch  1 never executed
        -: 1743:		{
    #####: 1744:		if ( number_to_move == YY_MORE_ADJ )
branch  0 never executed
branch  1 never executed
        -: 1745:			{
        -: 1746:			ret_val = EOB_ACT_END_OF_FILE;
    #####: 1747:			yyrestart(yyin  );
    #####: 1748:			}
        -: 1749:
        -: 1750:		else
        -: 1751:			{
        -: 1752:			ret_val = EOB_ACT_LAST_MATCH;
    #####: 1753:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        -: 1754:				YY_BUFFER_EOF_PENDING;
        -: 1755:			}
        -: 1756:		}
        -: 1757:
        -: 1758:	else
        -: 1759:		ret_val = EOB_ACT_CONTINUE_SCAN;
        -: 1760:
    #####: 1761:	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
branch  0 never executed
branch  1 never executed
        -: 1762:		/* Extend the array by 50%, plus the number we really need. */
    #####: 1763:		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    #####: 1764:		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
    #####: 1765:		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
branch  0 never executed
branch  1 never executed
    #####: 1766:			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    #####: 1767:	}
        -: 1768:
    #####: 1769:	(yy_n_chars) += number_to_move;
    #####: 1770:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    #####: 1771:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
        -: 1772:
    #####: 1773:	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
        -: 1774:
    #####: 1775:	return ret_val;
    #####: 1776:}
        -: 1777:
        -: 1778:/* yy_get_previous_state - get the state just before the EOB char was reached */
        -: 1779:
function yy_get_previous_state called 0 returned 0% blocks executed 0%
    #####: 1780:    static yy_state_type yy_get_previous_state (void)
        -: 1781:{
        -: 1782:	register yy_state_type yy_current_state;
        -: 1783:	register char *yy_cp;
        -: 1784:    
    #####: 1785:	yy_current_state = (yy_start);
        -: 1786:
    #####: 1787:	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
branch  0 never executed
branch  1 never executed
        -: 1788:		{
    #####: 1789:		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
branch  0 never executed
branch  1 never executed
    #####: 1790:		if ( yy_accept[yy_current_state] )
branch  0 never executed
branch  1 never executed
        -: 1791:			{
    #####: 1792:			(yy_last_accepting_state) = yy_current_state;
    #####: 1793:			(yy_last_accepting_cpos) = yy_cp;
    #####: 1794:			}
    #####: 1795:		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
branch  0 never executed
branch  1 never executed
        -: 1796:			{
    #####: 1797:			yy_current_state = (int) yy_def[yy_current_state];
    #####: 1798:			if ( yy_current_state >= 316 )
branch  0 never executed
branch  1 never executed
    #####: 1799:				yy_c = yy_meta[(unsigned int) yy_c];
        -: 1800:			}
    #####: 1801:		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        -: 1802:		}
        -: 1803:
    #####: 1804:	return yy_current_state;
        -: 1805:}
        -: 1806:
        -: 1807:/* yy_try_NUL_trans - try to make a transition on the NUL character
        -: 1808: *
        -: 1809: * synopsis
        -: 1810: *	next_state = yy_try_NUL_trans( current_state );
        -: 1811: */
function yy_try_NUL_trans called 0 returned 0% blocks executed 0%
    #####: 1812:    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
        -: 1813:{
        -: 1814:	register int yy_is_jam;
    #####: 1815:    	register char *yy_cp = (yy_c_buf_p);
        -: 1816:
        -: 1817:	register YY_CHAR yy_c = 1;
    #####: 1818:	if ( yy_accept[yy_current_state] )
branch  0 never executed
branch  1 never executed
        -: 1819:		{
    #####: 1820:		(yy_last_accepting_state) = yy_current_state;
    #####: 1821:		(yy_last_accepting_cpos) = yy_cp;
    #####: 1822:		}
    #####: 1823:	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
branch  0 never executed
branch  1 never executed
        -: 1824:		{
    #####: 1825:		yy_current_state = (int) yy_def[yy_current_state];
    #####: 1826:		if ( yy_current_state >= 316 )
branch  0 never executed
branch  1 never executed
    #####: 1827:			yy_c = yy_meta[(unsigned int) yy_c];
        -: 1828:		}
    #####: 1829:	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    #####: 1830:	yy_is_jam = (yy_current_state == 315);
        -: 1831:
    #####: 1832:	return yy_is_jam ? 0 : yy_current_state;
        -: 1833:}
        -: 1834:
        -: 1835:#ifndef YY_NO_UNPUT
        -: 1836:
        -: 1837:    static void yyunput (int c, register char * yy_bp )
        -: 1838:{
        -: 1839:	register char *yy_cp;
        -: 1840:    
        -: 1841:    yy_cp = (yy_c_buf_p);
        -: 1842:
        -: 1843:	/* undo effects of setting up yytext */
        -: 1844:	*yy_cp = (yy_hold_char);
        -: 1845:
        -: 1846:	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        -: 1847:		{ /* need to shift things up to make room */
        -: 1848:		/* +2 for EOB chars. */
        -: 1849:		register int number_to_move = (yy_n_chars) + 2;
        -: 1850:		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
        -: 1851:					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        -: 1852:		register char *source =
        -: 1853:				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
        -: 1854:
        -: 1855:		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        -: 1856:			*--dest = *--source;
        -: 1857:
        -: 1858:		yy_cp += (int) (dest - source);
        -: 1859:		yy_bp += (int) (dest - source);
        -: 1860:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        -: 1861:			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
        -: 1862:
        -: 1863:		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        -: 1864:			YY_FATAL_ERROR( "flex scanner push-back overflow" );
        -: 1865:		}
        -: 1866:
        -: 1867:	*--yy_cp = (char) c;
        -: 1868:
        -: 1869:	(yytext_ptr) = yy_bp;
        -: 1870:	(yy_hold_char) = *yy_cp;
        -: 1871:	(yy_c_buf_p) = yy_cp;
        -: 1872:}
        -: 1873:
        -: 1874:#endif
        -: 1875:
        -: 1876:#ifndef YY_NO_INPUT
        -: 1877:#ifdef __cplusplus
        -: 1878:    static int yyinput (void)
        -: 1879:#else
function input called 0 returned 0% blocks executed 0%
    #####: 1880:    static int input  (void)
        -: 1881:#endif
        -: 1882:
        -: 1883:{
        -: 1884:	int c;
        -: 1885:    
    #####: 1886:	*(yy_c_buf_p) = (yy_hold_char);
        -: 1887:
    #####: 1888:	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
branch  0 never executed
branch  1 never executed
        -: 1889:		{
        -: 1890:		/* yy_c_buf_p now points to the character we want to return.
        -: 1891:		 * If this occurs *before* the EOB characters, then it's a
        -: 1892:		 * valid NUL; if not, then we've hit the end of the buffer.
        -: 1893:		 */
    #####: 1894:		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
branch  0 never executed
branch  1 never executed
        -: 1895:			/* This was really a NUL. */
    #####: 1896:			*(yy_c_buf_p) = '\0';
        -: 1897:
        -: 1898:		else
        -: 1899:			{ /* need more input */
    #####: 1900:			int offset = (yy_c_buf_p) - (yytext_ptr);
    #####: 1901:			++(yy_c_buf_p);
        -: 1902:
    #####: 1903:			switch ( yy_get_next_buffer(  ) )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1904:				{
        -: 1905:				case EOB_ACT_LAST_MATCH:
        -: 1906:					/* This happens because yy_g_n_b()
        -: 1907:					 * sees that we've accumulated a
        -: 1908:					 * token and flags that we need to
        -: 1909:					 * try matching the token before
        -: 1910:					 * proceeding.  But for input(),
        -: 1911:					 * there's no matching to consider.
        -: 1912:					 * So convert the EOB_ACT_LAST_MATCH
        -: 1913:					 * to EOB_ACT_END_OF_FILE.
        -: 1914:					 */
        -: 1915:
        -: 1916:					/* Reset buffer status. */
    #####: 1917:					yyrestart(yyin );
        -: 1918:
        -: 1919:					/*FALLTHROUGH*/
        -: 1920:
        -: 1921:				case EOB_ACT_END_OF_FILE:
        -: 1922:					{
    #####: 1923:					if ( yywrap( ) )
branch  0 never executed
branch  1 never executed
    #####: 1924:						return EOF;
        -: 1925:
    #####: 1926:					if ( ! (yy_did_buffer_switch_on_eof) )
branch  0 never executed
branch  1 never executed
    #####: 1927:						YY_NEW_FILE;
        -: 1928:#ifdef __cplusplus
        -: 1929:					return yyinput();
        -: 1930:#else
    #####: 1931:					return input();
        -: 1932:#endif
        -: 1933:					}
        -: 1934:
        -: 1935:				case EOB_ACT_CONTINUE_SCAN:
    #####: 1936:					(yy_c_buf_p) = (yytext_ptr) + offset;
    #####: 1937:					break;
        -: 1938:				}
    #####: 1939:			}
        -: 1940:		}
        -: 1941:
    #####: 1942:	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    #####: 1943:	*(yy_c_buf_p) = '\0';	/* preserve yytext */
    #####: 1944:	(yy_hold_char) = *++(yy_c_buf_p);
        -: 1945:
    #####: 1946:	return c;
    #####: 1947:}
        -: 1948:#endif	/* ifndef YY_NO_INPUT */
        -: 1949:
        -: 1950:/** Immediately switch to a different input stream.
        -: 1951: * @param input_file A readable stream.
        -: 1952: * 
        -: 1953: * @note This function does not reset the start condition to @c INITIAL .
        -: 1954: */
function yyrestart called 0 returned 0% blocks executed 0%
    #####: 1955:    void yyrestart  (FILE * input_file )
        -: 1956:{
        -: 1957:    
    #####: 1958:	if ( ! YY_CURRENT_BUFFER ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1959:        yyensure_buffer_stack ();
    #####: 1960:		YY_CURRENT_BUFFER_LVALUE =
    #####: 1961:            yy_create_buffer(yyin,YY_BUF_SIZE );
    #####: 1962:	}
        -: 1963:
    #####: 1964:	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
branch  0 never executed
branch  1 never executed
    #####: 1965:	yy_load_buffer_state( );
    #####: 1966:}
        -: 1967:
        -: 1968:/** Switch to a different input buffer.
        -: 1969: * @param new_buffer The new input buffer.
        -: 1970: * 
        -: 1971: */
function yy_switch_to_buffer called 0 returned 0% blocks executed 0%
    #####: 1972:    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
        -: 1973:{
        -: 1974:    
        -: 1975:	/* TODO. We should be able to replace this entire function body
        -: 1976:	 * with
        -: 1977:	 *		yypop_buffer_state();
        -: 1978:	 *		yypush_buffer_state(new_buffer);
        -: 1979:     */
    #####: 1980:	yyensure_buffer_stack ();
    #####: 1981:	if ( YY_CURRENT_BUFFER == new_buffer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1982:		return;
        -: 1983:
    #####: 1984:	if ( YY_CURRENT_BUFFER )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1985:		{
        -: 1986:		/* Flush out information for old buffer. */
    #####: 1987:		*(yy_c_buf_p) = (yy_hold_char);
    #####: 1988:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    #####: 1989:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    #####: 1990:		}
        -: 1991:
    #####: 1992:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
    #####: 1993:	yy_load_buffer_state( );
        -: 1994:
        -: 1995:	/* We don't actually know whether we did this switch during
        -: 1996:	 * EOF (yywrap()) processing, but the only time this flag
        -: 1997:	 * is looked at is after yywrap() is called, so it's safe
        -: 1998:	 * to go ahead and always set it.
        -: 1999:	 */
    #####: 2000:	(yy_did_buffer_switch_on_eof) = 1;
    #####: 2001:}
        -: 2002:
function yy_load_buffer_state called 0 returned 0% blocks executed 0%
    #####: 2003:static void yy_load_buffer_state  (void)
        -: 2004:{
    #####: 2005:    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    #####: 2006:	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    #####: 2007:	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    #####: 2008:	(yy_hold_char) = *(yy_c_buf_p);
    #####: 2009:}
        -: 2010:
        -: 2011:/** Allocate and initialize an input buffer state.
        -: 2012: * @param file A readable stream.
        -: 2013: * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
        -: 2014: * 
        -: 2015: * @return the allocated buffer state.
        -: 2016: */
function yy_create_buffer called 0 returned 0% blocks executed 0%
    #####: 2017:    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
        -: 2018:{
        -: 2019:	YY_BUFFER_STATE b;
        -: 2020:    
    #####: 2021:	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    #####: 2022:	if ( ! b )
branch  0 never executed
branch  1 never executed
    #####: 2023:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2024:
    #####: 2025:	b->yy_buf_size = size;
        -: 2026:
        -: 2027:	/* yy_ch_buf has to be 2 characters longer than the size given because
        -: 2028:	 * we need to put in 2 end-of-buffer characters.
        -: 2029:	 */
    #####: 2030:	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    #####: 2031:	if ( ! b->yy_ch_buf )
branch  0 never executed
branch  1 never executed
    #####: 2032:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2033:
    #####: 2034:	b->yy_is_our_buffer = 1;
        -: 2035:
    #####: 2036:	yy_init_buffer(b,file );
        -: 2037:
    #####: 2038:	return b;
        -: 2039:}
        -: 2040:
        -: 2041:/** Destroy the buffer.
        -: 2042: * @param b a buffer created with yy_create_buffer()
        -: 2043: * 
        -: 2044: */
function yy_delete_buffer called 0 returned 0% blocks executed 0%
    #####: 2045:    void yy_delete_buffer (YY_BUFFER_STATE  b )
        -: 2046:{
        -: 2047:    
    #####: 2048:	if ( ! b )
branch  0 never executed
branch  1 never executed
        -: 2049:		return;
        -: 2050:
    #####: 2051:	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2052:		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
        -: 2053:
    #####: 2054:	if ( b->yy_is_our_buffer )
branch  0 never executed
branch  1 never executed
    #####: 2055:		yyfree((void *) b->yy_ch_buf  );
        -: 2056:
    #####: 2057:	yyfree((void *) b  );
    #####: 2058:}
        -: 2059:
        -: 2060:#ifndef __cplusplus
        -: 2061:extern int isatty (int );
        -: 2062:#endif /* __cplusplus */
        -: 2063:    
        -: 2064:/* Initializes or reinitializes a buffer.
        -: 2065: * This function is sometimes called more than once on the same buffer,
        -: 2066: * such as during a yyrestart() or at EOF.
        -: 2067: */
function yy_init_buffer called 0 returned 0% blocks executed 0%
    #####: 2068:    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
        -: 2069:
        -: 2070:{
    #####: 2071:	int oerrno = errno;
        -: 2072:    
    #####: 2073:	yy_flush_buffer(b );
        -: 2074:
    #####: 2075:	b->yy_input_file = file;
    #####: 2076:	b->yy_fill_buffer = 1;
        -: 2077:
        -: 2078:    /* If b is the current buffer, then yy_init_buffer was _probably_
        -: 2079:     * called from yyrestart() or through yy_get_next_buffer.
        -: 2080:     * In that case, we don't want to reset the lineno or column.
        -: 2081:     */
    #####: 2082:    if (b != YY_CURRENT_BUFFER){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2083:        b->yy_bs_lineno = 1;
    #####: 2084:        b->yy_bs_column = 0;
    #####: 2085:    }
        -: 2086:
    #####: 2087:        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
branch  0 never executed
branch  1 never executed
        -: 2088:    
    #####: 2089:	errno = oerrno;
    #####: 2090:}
        -: 2091:
        -: 2092:/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
        -: 2093: * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
        -: 2094: * 
        -: 2095: */
function yy_flush_buffer called 0 returned 0% blocks executed 0%
    #####: 2096:    void yy_flush_buffer (YY_BUFFER_STATE  b )
        -: 2097:{
    #####: 2098:    	if ( ! b )
branch  0 never executed
branch  1 never executed
        -: 2099:		return;
        -: 2100:
    #####: 2101:	b->yy_n_chars = 0;
        -: 2102:
        -: 2103:	/* We always need two end-of-buffer characters.  The first causes
        -: 2104:	 * a transition to the end-of-buffer state.  The second causes
        -: 2105:	 * a jam in that state.
        -: 2106:	 */
    #####: 2107:	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    #####: 2108:	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
        -: 2109:
    #####: 2110:	b->yy_buf_pos = &b->yy_ch_buf[0];
        -: 2111:
    #####: 2112:	b->yy_at_bol = 1;
    #####: 2113:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2114:
    #####: 2115:	if ( b == YY_CURRENT_BUFFER )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2116:		yy_load_buffer_state( );
    #####: 2117:}
        -: 2118:
        -: 2119:/** Pushes the new state onto the stack. The new state becomes
        -: 2120: *  the current state. This function will allocate the stack
        -: 2121: *  if necessary.
        -: 2122: *  @param new_buffer The new state.
        -: 2123: *  
        -: 2124: */
function yypush_buffer_state called 0 returned 0% blocks executed 0%
    #####: 2125:void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
        -: 2126:{
    #####: 2127:    	if (new_buffer == NULL)
branch  0 never executed
branch  1 never executed
        -: 2128:		return;
        -: 2129:
    #####: 2130:	yyensure_buffer_stack();
        -: 2131:
        -: 2132:	/* This block is copied from yy_switch_to_buffer. */
    #####: 2133:	if ( YY_CURRENT_BUFFER )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2134:		{
        -: 2135:		/* Flush out information for old buffer. */
    #####: 2136:		*(yy_c_buf_p) = (yy_hold_char);
    #####: 2137:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    #####: 2138:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    #####: 2139:		}
        -: 2140:
        -: 2141:	/* Only push if top exists. Otherwise, replace top. */
    #####: 2142:	if (YY_CURRENT_BUFFER)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2143:		(yy_buffer_stack_top)++;
    #####: 2144:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
        -: 2145:
        -: 2146:	/* copied from yy_switch_to_buffer. */
    #####: 2147:	yy_load_buffer_state( );
    #####: 2148:	(yy_did_buffer_switch_on_eof) = 1;
    #####: 2149:}
        -: 2150:
        -: 2151:/** Removes and deletes the top of the stack, if present.
        -: 2152: *  The next element becomes the new top.
        -: 2153: *  
        -: 2154: */
function yypop_buffer_state called 0 returned 0% blocks executed 0%
    #####: 2155:void yypop_buffer_state (void)
        -: 2156:{
    #####: 2157:    	if (!YY_CURRENT_BUFFER)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2158:		return;
        -: 2159:
    #####: 2160:	yy_delete_buffer(YY_CURRENT_BUFFER );
branch  0 never executed
branch  1 never executed
    #####: 2161:	YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 2162:	if ((yy_buffer_stack_top) > 0)
branch  0 never executed
branch  1 never executed
    #####: 2163:		--(yy_buffer_stack_top);
        -: 2164:
    #####: 2165:	if (YY_CURRENT_BUFFER) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2166:		yy_load_buffer_state( );
    #####: 2167:		(yy_did_buffer_switch_on_eof) = 1;
    #####: 2168:	}
    #####: 2169:}
        -: 2170:
        -: 2171:/* Allocates the stack if it does not exist.
        -: 2172: *  Guarantees space for at least one push.
        -: 2173: */
function yyensure_buffer_stack called 0 returned 0% blocks executed 0%
    #####: 2174:static void yyensure_buffer_stack (void)
        -: 2175:{
        -: 2176:	int num_to_alloc;
        -: 2177:    
    #####: 2178:	if (!(yy_buffer_stack)) {
branch  0 never executed
branch  1 never executed
        -: 2179:
        -: 2180:		/* First allocation is just for 2 elements, since we don't know if this
        -: 2181:		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
        -: 2182:		 * immediate realloc on the next call.
        -: 2183:         */
        -: 2184:		num_to_alloc = 1;
    #####: 2185:		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
        -: 2186:								(num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2187:								);
    #####: 2188:		if ( ! (yy_buffer_stack) )
branch  0 never executed
branch  1 never executed
    #####: 2189:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2190:								  
    #####: 2191:		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
        -: 2192:				
    #####: 2193:		(yy_buffer_stack_max) = num_to_alloc;
    #####: 2194:		(yy_buffer_stack_top) = 0;
    #####: 2195:		return;
        -: 2196:	}
        -: 2197:
    #####: 2198:	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
branch  0 never executed
branch  1 never executed
        -: 2199:
        -: 2200:		/* Increase the buffer to prepare for a possible push. */
        -: 2201:		int grow_size = 8 /* arbitrary grow size */;
        -: 2202:
    #####: 2203:		num_to_alloc = (yy_buffer_stack_max) + grow_size;
    #####: 2204:		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
    #####: 2205:								((yy_buffer_stack),
    #####: 2206:								num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2207:								);
    #####: 2208:		if ( ! (yy_buffer_stack) )
branch  0 never executed
branch  1 never executed
    #####: 2209:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2210:
        -: 2211:		/* zero only the new slots.*/
    #####: 2212:		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    #####: 2213:		(yy_buffer_stack_max) = num_to_alloc;
    #####: 2214:	}
    #####: 2215:}
        -: 2216:
        -: 2217:/** Setup the input buffer state to scan directly from a user-specified character buffer.
        -: 2218: * @param base the character buffer
        -: 2219: * @param size the size in bytes of the character buffer
        -: 2220: * 
        -: 2221: * @return the newly allocated buffer state object. 
        -: 2222: */
function yy_scan_buffer called 0 returned 0% blocks executed 0%
    #####: 2223:YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
        -: 2224:{
        -: 2225:	YY_BUFFER_STATE b;
        -: 2226:    
    #####: 2227:	if ( size < 2 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2228:	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
branch  0 never executed
branch  1 never executed
    #####: 2229:	     base[size-1] != YY_END_OF_BUFFER_CHAR )
        -: 2230:		/* They forgot to leave room for the EOB's. */
    #####: 2231:		return 0;
        -: 2232:
    #####: 2233:	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    #####: 2234:	if ( ! b )
branch  0 never executed
branch  1 never executed
    #####: 2235:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
        -: 2236:
    #####: 2237:	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
    #####: 2238:	b->yy_buf_pos = b->yy_ch_buf = base;
    #####: 2239:	b->yy_is_our_buffer = 0;
    #####: 2240:	b->yy_input_file = 0;
    #####: 2241:	b->yy_n_chars = b->yy_buf_size;
    #####: 2242:	b->yy_is_interactive = 0;
    #####: 2243:	b->yy_at_bol = 1;
    #####: 2244:	b->yy_fill_buffer = 0;
    #####: 2245:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2246:
    #####: 2247:	yy_switch_to_buffer(b  );
        -: 2248:
    #####: 2249:	return b;
    #####: 2250:}
        -: 2251:
        -: 2252:/** Setup the input buffer state to scan a string. The next call to yylex() will
        -: 2253: * scan from a @e copy of @a str.
        -: 2254: * @param yystr a NUL-terminated string to scan
        -: 2255: * 
        -: 2256: * @return the newly allocated buffer state object.
        -: 2257: * @note If you want to scan bytes that may contain NUL values, then use
        -: 2258: *       yy_scan_bytes() instead.
        -: 2259: */
function yy_scan_string called 0 returned 0% blocks executed 0%
    #####: 2260:YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
        -: 2261:{
        -: 2262:    
    #####: 2263:	return yy_scan_bytes(yystr,strlen(yystr) );
        -: 2264:}
        -: 2265:
        -: 2266:/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
        -: 2267: * scan from a @e copy of @a bytes.
        -: 2268: * @param bytes the byte buffer to scan
        -: 2269: * @param len the number of bytes in the buffer pointed to by @a bytes.
        -: 2270: * 
        -: 2271: * @return the newly allocated buffer state object.
        -: 2272: */
function yy_scan_bytes called 0 returned 0% blocks executed 0%
    #####: 2273:YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
        -: 2274:{
        -: 2275:	YY_BUFFER_STATE b;
        -: 2276:	char *buf;
        -: 2277:	yy_size_t n;
        -: 2278:	int i;
        -: 2279:    
        -: 2280:	/* Get memory for full buffer, including space for trailing EOB's. */
    #####: 2281:	n = _yybytes_len + 2;
    #####: 2282:	buf = (char *) yyalloc(n  );
    #####: 2283:	if ( ! buf )
branch  0 never executed
branch  1 never executed
    #####: 2284:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
        -: 2285:
    #####: 2286:	for ( i = 0; i < _yybytes_len; ++i )
branch  0 never executed
branch  1 never executed
    #####: 2287:		buf[i] = yybytes[i];
        -: 2288:
    #####: 2289:	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
        -: 2290:
    #####: 2291:	b = yy_scan_buffer(buf,n );
    #####: 2292:	if ( ! b )
branch  0 never executed
branch  1 never executed
    #####: 2293:		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
        -: 2294:
        -: 2295:	/* It's okay to grow etc. this buffer, and we should throw it
        -: 2296:	 * away when we're done.
        -: 2297:	 */
    #####: 2298:	b->yy_is_our_buffer = 1;
        -: 2299:
    #####: 2300:	return b;
        -: 2301:}
        -: 2302:
        -: 2303:#ifndef YY_EXIT_FAILURE
        -: 2304:#define YY_EXIT_FAILURE 2
        -: 2305:#endif
        -: 2306:
function yy_fatal_error called 0 returned 0% blocks executed 0%
    #####: 2307:static void yy_fatal_error (yyconst char* msg )
        -: 2308:{
    #####: 2309:    	(void) fprintf( stderr, "%s\n", msg );
    #####: 2310:	exit( YY_EXIT_FAILURE );
        -: 2311:}
        -: 2312:
        -: 2313:/* Redefine yyless() so it works in section 3 code. */
        -: 2314:
        -: 2315:#undef yyless
        -: 2316:#define yyless(n) \
        -: 2317:	do \
        -: 2318:		{ \
        -: 2319:		/* Undo effects of setting up yytext. */ \
        -: 2320:        int yyless_macro_arg = (n); \
        -: 2321:        YY_LESS_LINENO(yyless_macro_arg);\
        -: 2322:		yytext[yyleng] = (yy_hold_char); \
        -: 2323:		(yy_c_buf_p) = yytext + yyless_macro_arg; \
        -: 2324:		(yy_hold_char) = *(yy_c_buf_p); \
        -: 2325:		*(yy_c_buf_p) = '\0'; \
        -: 2326:		yyleng = yyless_macro_arg; \
        -: 2327:		} \
        -: 2328:	while ( 0 )
        -: 2329:
        -: 2330:/* Accessor  methods (get/set functions) to struct members. */
        -: 2331:
        -: 2332:/** Get the current line number.
        -: 2333: * 
        -: 2334: */
function yyget_lineno called 0 returned 0% blocks executed 0%
    #####: 2335:int yyget_lineno  (void)
        -: 2336:{
        -: 2337:        
    #####: 2338:    return yylineno;
        -: 2339:}
        -: 2340:
        -: 2341:/** Get the input stream.
        -: 2342: * 
        -: 2343: */
function yyget_in called 0 returned 0% blocks executed 0%
    #####: 2344:FILE *yyget_in  (void)
        -: 2345:{
    #####: 2346:        return yyin;
        -: 2347:}
        -: 2348:
        -: 2349:/** Get the output stream.
        -: 2350: * 
        -: 2351: */
function yyget_out called 0 returned 0% blocks executed 0%
    #####: 2352:FILE *yyget_out  (void)
        -: 2353:{
    #####: 2354:        return yyout;
        -: 2355:}
        -: 2356:
        -: 2357:/** Get the length of the current token.
        -: 2358: * 
        -: 2359: */
function yyget_leng called 0 returned 0% blocks executed 0%
    #####: 2360:int yyget_leng  (void)
        -: 2361:{
    #####: 2362:        return yyleng;
        -: 2363:}
        -: 2364:
        -: 2365:/** Get the current token.
        -: 2366: * 
        -: 2367: */
        -: 2368:
function yyget_text called 0 returned 0% blocks executed 0%
    #####: 2369:char *yyget_text  (void)
        -: 2370:{
    #####: 2371:        return yytext;
        -: 2372:}
        -: 2373:
        -: 2374:/** Set the current line number.
        -: 2375: * @param _line_number
        -: 2376: * 
        -: 2377: */
function yyset_lineno called 0 returned 0% blocks executed 0%
    #####: 2378:void yyset_lineno (int  _line_number )
        -: 2379:{
        -: 2380:    
    #####: 2381:    yylineno = _line_number;
    #####: 2382:}
        -: 2383:
        -: 2384:/** Set the input stream. This does not discard the current
        -: 2385: * input buffer.
        -: 2386: * @param _in_str A readable stream.
        -: 2387: * 
        -: 2388: * @see yy_switch_to_buffer
        -: 2389: */
function yyset_in called 0 returned 0% blocks executed 0%
    #####: 2390:void yyset_in (FILE *  _in_str )
        -: 2391:{
    #####: 2392:        yyin = _in_str ;
    #####: 2393:}
        -: 2394:
function yyset_out called 0 returned 0% blocks executed 0%
    #####: 2395:void yyset_out (FILE *  _out_str )
        -: 2396:{
    #####: 2397:        yyout = _out_str ;
    #####: 2398:}
        -: 2399:
function yyget_debug called 0 returned 0% blocks executed 0%
    #####: 2400:int yyget_debug  (void)
        -: 2401:{
    #####: 2402:        return yy_flex_debug;
        -: 2403:}
        -: 2404:
function yyset_debug called 0 returned 0% blocks executed 0%
    #####: 2405:void yyset_debug (int  _bdebug )
        -: 2406:{
    #####: 2407:        yy_flex_debug = _bdebug ;
    #####: 2408:}
        -: 2409:
function yy_init_globals called 0 returned 0% blocks executed 0%
    #####: 2410:static int yy_init_globals (void)
        -: 2411:{
        -: 2412:        /* Initialization is the same as for the non-reentrant scanner.
        -: 2413:     * This function is called from yylex_destroy(), so don't allocate here.
        -: 2414:     */
        -: 2415:
    #####: 2416:    (yy_buffer_stack) = 0;
    #####: 2417:    (yy_buffer_stack_top) = 0;
    #####: 2418:    (yy_buffer_stack_max) = 0;
    #####: 2419:    (yy_c_buf_p) = (char *) 0;
    #####: 2420:    (yy_init) = 0;
    #####: 2421:    (yy_start) = 0;
        -: 2422:
        -: 2423:/* Defined in main.c */
        -: 2424:#ifdef YY_STDINIT
        -: 2425:    yyin = stdin;
        -: 2426:    yyout = stdout;
        -: 2427:#else
    #####: 2428:    yyin = (FILE *) 0;
    #####: 2429:    yyout = (FILE *) 0;
        -: 2430:#endif
        -: 2431:
        -: 2432:    /* For future reference: Set errno on error, since we are called by
        -: 2433:     * yylex_init()
        -: 2434:     */
    #####: 2435:    return 0;
        -: 2436:}
        -: 2437:
        -: 2438:/* yylex_destroy is for both reentrant and non-reentrant scanners. */
function yylex_destroy called 0 returned 0% blocks executed 0%
    #####: 2439:int yylex_destroy  (void)
        -: 2440:{
        -: 2441:    
        -: 2442:    /* Pop the buffer stack, destroying each element. */
    #####: 2443:	while(YY_CURRENT_BUFFER){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2444:		yy_delete_buffer(YY_CURRENT_BUFFER  );
branch  0 never executed
branch  1 never executed
    #####: 2445:		YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 2446:		yypop_buffer_state();
        -: 2447:	}
        -: 2448:
        -: 2449:	/* Destroy the stack itself. */
    #####: 2450:	yyfree((yy_buffer_stack) );
    #####: 2451:	(yy_buffer_stack) = NULL;
        -: 2452:
        -: 2453:    /* Reset the globals. This is important in a non-reentrant scanner so the next time
        -: 2454:     * yylex() is called, initialization will occur. */
    #####: 2455:    yy_init_globals( );
        -: 2456:
    #####: 2457:    return 0;
        -: 2458:}
        -: 2459:
        -: 2460:/*
        -: 2461: * Internal utility routines.
        -: 2462: */
        -: 2463:
        -: 2464:#ifndef yytext_ptr
        -: 2465:static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
        -: 2466:{
        -: 2467:	register int i;
        -: 2468:	for ( i = 0; i < n; ++i )
        -: 2469:		s1[i] = s2[i];
        -: 2470:}
        -: 2471:#endif
        -: 2472:
        -: 2473:#ifdef YY_NEED_STRLEN
        -: 2474:static int yy_flex_strlen (yyconst char * s )
        -: 2475:{
        -: 2476:	register int n;
        -: 2477:	for ( n = 0; s[n]; ++n )
        -: 2478:		;
        -: 2479:
        -: 2480:	return n;
        -: 2481:}
        -: 2482:#endif
        -: 2483:
function yyalloc called 0 returned 0% blocks executed 0%
    #####: 2484:void *yyalloc (yy_size_t  size )
        -: 2485:{
    #####: 2486:	return (void *) malloc( size );
        -: 2487:}
        -: 2488:
function yyrealloc called 0 returned 0% blocks executed 0%
    #####: 2489:void *yyrealloc  (void * ptr, yy_size_t  size )
        -: 2490:{
        -: 2491:	/* The cast to (char *) in the following accommodates both
        -: 2492:	 * implementations that use char* generic pointers, and those
        -: 2493:	 * that use void* generic pointers.  It works with the latter
        -: 2494:	 * because both ANSI C and C++ allow castless assignment from
        -: 2495:	 * any pointer type to void*, and deal with argument conversions
        -: 2496:	 * as though doing an assignment.
        -: 2497:	 */
    #####: 2498:	return (void *) realloc( (char *) ptr, size );
        -: 2499:}
        -: 2500:
function yyfree called 0 returned 0% blocks executed 0%
    #####: 2501:void yyfree (void * ptr )
        -: 2502:{
    #####: 2503:	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
    #####: 2504:}
        -: 2505:
        -: 2506:#define YYTABLES_NAME "yytables"
        -: 2507:
        -: 2508:#line 356 "../../bc/scan.l"
        -: 2509:
        -: 2510:
        -: 2511:
        -: 2512:
        -: 2513:
        -: 2514:/* This is the way to get multiple files input into lex. */
        -: 2515:
        -: 2516:int
        -: 2517:yywrap(void)
        -: 2518:{
        -: 2519:  if (!open_new_file ()) return (1);	/* EOF on standard in. */
        -: 2520:  return (0);          			/* We have more input. */
        -: 2521:  yyunput(0,NULL);	/* Make sure the compiler think yyunput is used. */
        -: 2522:}
        -: 2523:
